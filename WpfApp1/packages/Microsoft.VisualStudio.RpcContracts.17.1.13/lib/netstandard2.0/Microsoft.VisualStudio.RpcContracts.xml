<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.RpcContracts</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.RpcContracts.IBrokeredServiceManifest">
            <summary>
            Exposes details about availability of services proffered to the client.
            Obtainable from the <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_4Services.RemoteBrokeredServiceManifest" /> service.
            </summary>
            <remarks>
            The results are based on the caller.
            For example if an instance of this service is obtained by a Live Share guest
            the results from method calls may vary from an instance of this service obtained by a Codespaces client.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.IBrokeredServiceManifest.GetAvailableServicesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the list of services that are available from an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A collection of service monikers.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.IBrokeredServiceManifest.GetAvailableVersionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the collection of versions available for the specified service from an <see cref="T:Microsoft.ServiceHub.Framework.IServiceBroker" />.
            </summary>
            <param name="serviceName">The <see cref="P:Microsoft.ServiceHub.Framework.ServiceMoniker.Name" /> from the <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" /> for the service to get information about.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>
            A collection of versions available for the named service.
            A null element may be in the collection if the server may consider a service request without regard to the requested version.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.IReducedFunctionalityReportingService">
            <summary>
            Provides functionality for communicating causes for reduced functionality in features to the user.
            Obtainable from the <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_8Services.ReducedFunctionalityReportingService" /> service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.IReducedFunctionalityReportingService.ReportReducedFunctionalityAsync(System.String,System.String,Microsoft.ServiceHub.Framework.ServiceMoniker,System.Guid,System.UInt32,System.Threading.CancellationToken)">
            <summary>
            Presents modeless UI to the user that explains why a feature is disabled or operating with reduced functionality.
            </summary>
            <param name="reducedFeatureId">
            A non-localized string that identifies the feature that is disabled or operating with reduced functionality.
            This string should be relatively static as it is used as a key to recognize and prevent redundant UI when the same feature reports failure multiple times.
            It may also be used in telemetry events to identify the impact of a missing service.
            </param>
            <param name="reducedFeature">
            A localized display name for the feature that is disabled or operating with reduced functionality.
            This string is inserted into the placeholder of a larger string in a *singular* grammatical context (e.g. "{Your feature} is broken").
            While this value may use Title Case for the feature name, it should not contain punctuation.
            </param>
            <param name="serviceMoniker">The moniker for the brokered service that is not available.</param>
            <param name="toolWindowGuid">The GUID for the tool window that hosts the feature's UI, if any. An infobar may be added to this tool window.</param>
            <param name="toolWindowInstanceId">The ID of the multi-instance tool window specified by <paramref name="toolWindowGuid" /> that the user was interacting with or otherwise should show the infobar, when applicable.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the task of presenting UI to the user.</returns>
            <remarks>
            This method presents UI to inform the user as to why functionality of a feature is reduced or disabled.
            This UI is modeless and does not steal input focus from the user.
            This method may log details and/or post telemetry events as well.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.IReducedFunctionalityReportingService.ReportReducedFunctionalityAsync(System.String,System.String,Microsoft.ServiceHub.Framework.ServiceMoniker,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.RpcContracts.IReducedFunctionalityReportingService.ReportReducedFunctionalityAsync(System.String,System.String,Microsoft.ServiceHub.Framework.ServiceMoniker,System.Guid,System.UInt32,System.Threading.CancellationToken)" />
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Build.BuildableItem">
            <summary>
            Represents a buildable item, like a csproj or CMakeLists.txt file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Build.BuildableItem.#ctor(System.String,System.String,Microsoft.VisualStudio.RpcContracts.Build.BuildableKind,System.Boolean,System.Boolean,System.String,System.Collections.Generic.IReadOnlyDictionary{Microsoft.VisualStudio.RpcContracts.Build.BuildAction,Microsoft.VisualStudio.RpcContracts.Build.BuildAvailabilityProperty},System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.RpcContracts.Build.LaunchProfile})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildableItem" /> class.
            </summary>
            <param name="id">The identity of the buildable item. Case-insensitive.
            This identity can be:
            One of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.WellKnownBuildableItemIds" />;
            OR, for files found in an opened folder, this value should be the
            Microsoft.VisualStudio.Workspace.ProjectConfiguration.Id;
            OR, for projects from a loaded solution, this value should be the project's GUID.</param>
            <param name="displayName">The name for the buildable item that is suitable for display to a user.</param>
            <param name="buildableKind">The kind (i.e. the variety) of the buildable item.</param>
            <param name="isStartupItem">The value indicating whether the buildable item is a selected project or file
            that should be displayed to the user as an item that will be launched (possibly with
            a debugger attached) when the Launch or Debug command is invoked.</param>
            <param name="supportsLaunch">A value indicating whether the buildable item supports launch (e.g. debug) operations.</param>
            <param name="activeLaunchProfileId">The <see cref="P:Microsoft.VisualStudio.RpcContracts.Build.LaunchProfile.Id" /> of the active <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.LaunchProfile" />.</param>
            <param name="buildActionAvailability">The availability of the various build actions.</param>
            <param name="launchProfiles">The buildable item's launch profiles.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Build.BuildableItem.Id">
            <summary>
            Gets the identity of the buildable item. Case-insensitive.
            This identity can be:
            One of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.WellKnownBuildableItemIds" />;
            OR, for files found in an opened folder, this value is the Microsoft.VisualStudio.Workspace.ProjectConfiguration.Id;
            OR, for projects from a loaded solution, this value is the project's GUID and can be used with APIs that request the project GUID.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Build.BuildableItem.DisplayName">
            <summary>
            Gets the name for the buildable item that is suitable for display to a user.
            This display name will be used to populate the Startup Projects (solution view)
            and Startup Items (folder view) drop-downs.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Build.BuildableItem.BuildableKind">
            <summary>
            Gets the kind (i.e. the variety) of the buildable item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Build.BuildableItem.IsStartupItem">
            <summary>
            Gets a value indicating whether the buildable item is a selected project or file
            that should be displayed to the user as an item that will be launched (possibly with
            a debugger attached) when the Launch or Debug command is invoked.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Build.BuildableItem.SupportsLaunch">
            <summary>
            Gets a value indicating whether the buildable item supports launch (e.g. debug) operations.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Build.BuildableItem.ActiveLaunchProfileId">
            <summary>
            Gets the <see cref="P:Microsoft.VisualStudio.RpcContracts.Build.LaunchProfile.Id" /> of the active <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.LaunchProfile" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Build.BuildableItem.BuildActionAvailability">
            <summary>
            Gets the availability of the various build actions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Build.BuildableItem.LaunchProfiles">
            <summary>
            Gets the buildable item's launch profiles.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Build.BuildableItemsChangedEventArgs">
            <summary>
            Provides information about buildable items.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Build.BuildableItemsChangedEventArgs.#ctor(System.Collections.Generic.IReadOnlyList{System.String},System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.RpcContracts.Build.BuildableItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildableItemsChangedEventArgs" /> class.
            </summary>
            <param name="removedBuildableItemIds">The list of buildable items that have been removed.</param>
            <param name="updatedBuildableItems">The buildable items that have changed.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Build.BuildableItemsChangedEventArgs.RemovedBuildableItemIds">
            <summary>
            Gets the list of buildable items that have been removed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Build.BuildableItemsChangedEventArgs.UpdatedBuildableItems">
            <summary>
            Gets the list of buildable items that have changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Build.BuildableKind">
            <summary>
            Represents the different varieties of buildable items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Build.BuildableKind.SolutionProject">
            <summary>
            A buildable that is a project belonging to a solution.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Build.BuildableKind.FolderTarget">
            <summary>
            A buildable that is a target found in an opened folder.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Build.BuildAction">
            <summary>
            Available build actions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Build.BuildAction.Build">
            <summary>
            Normal incremental build.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Build.BuildAction.Rebuild">
            <summary>
            Re-build.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Build.BuildAction.Clean">
            <summary>
            Clean build outputs.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Build.BuildAvailabilityProperty">
            <summary>
            Availability for a <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildAction" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Build.BuildAvailabilityProperty.Available">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildAction" /> is available.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Build.BuildAvailabilityProperty.NotAvailable">
            <summary>
             The <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildAction" /> is currently not available.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Build.BuildAvailabilityProperty.NotSupported">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildAction" /> is not supported.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Build.BuildEndedEventArgs">
            <summary>
            Context information relating to the end of a build operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Build.BuildEndedEventArgs.#ctor(Microsoft.VisualStudio.RpcContracts.Build.BuildAction,Microsoft.VisualStudio.RpcContracts.Build.BuildResult,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.RpcContracts.Build.BuildableItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildEndedEventArgs" /> class.
            </summary>
            <param name="buildAction">The build action that has ended.</param>
            <param name="buildResult">The result of the build operation.</param>
            <param name="requestedItems">The buildable items that were requested for the build operation.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Build.BuildEndedEventArgs.BuildAction">
            <summary>
            Gets the build action that has ended.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Build.BuildEndedEventArgs.BuildResult">
            <summary>
            Gets the result of the build operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Build.BuildEndedEventArgs.RequestedItems">
            <summary>
            Gets the buildable items that were requested for the build operation.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Build.BuildOperationResult">
            <summary>
            Provides information as to the outcome of a build operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Build.BuildOperationResult.#ctor(System.Guid,Microsoft.VisualStudio.RpcContracts.Build.BuildResult,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildOperationResult" /> class.
            </summary>
            <param name="operationId">Unique identifier of the build operation.</param>
            <param name="buildResult">The result of the build operation.</param>
            <param name="buildStatistics">Statistics about the build operation (e.g. the number of projects).</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Build.BuildOperationResult.OperationId">
            <summary>
            Gets the unique identifier of the build operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Build.BuildOperationResult.BuildResult">
            <summary>
            Gets the result of the build operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Build.BuildOperationResult.BuildStatistics">
            <summary>
            Gets statistics about the build operation (e.g. the number of projects).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Build.BuildProgressChangedEventArgs">
            <summary>
            Progress information for a build operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Build.BuildProgressChangedEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildProgressChangedEventArgs" /> class.
            </summary>
            <param name="progress">The build progress in percentage.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Build.BuildProgressChangedEventArgs.Progress">
            <summary>
            Gets the build progress in percentage.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Build.BuildResult">
            <summary>
            The result of executing a <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildAction" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Build.BuildResult.Succeeded">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildAction" /> succeeded.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Build.BuildResult.Failed">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildAction" /> failed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Build.BuildResult.Canceled">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildAction" /> cancelled before it completes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Build.BuildResult.NotAvailable">
            <summary>
            The <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildAction" /> not available upon the method call.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Build.BuildStartedEventArgs">
            <summary>
            Context information relating to the start of a build operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Build.BuildStartedEventArgs.#ctor(Microsoft.VisualStudio.RpcContracts.Build.BuildAction,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.RpcContracts.Build.BuildableItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildStartedEventArgs" /> class.
            </summary>
            <param name="buildAction">The build action that has started.</param>
            <param name="requestedItems">The buildable items that were requested for the build operation.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Build.BuildStartedEventArgs.BuildAction">
            <summary>
            Gets the build action that has started.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Build.BuildStartedEventArgs.RequestedItems">
            <summary>
            Gets the buildable items that were requested for the build operation.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Build.IBuildService">
            <summary>
            Provides support for build related operations.
            Obtain this using <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_4Services.BuildService" />.
            </summary>
            <remarks>
            The interface provides the following:
            <para> 1. Methods for invoking a <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildAction" /> on a list of buildables or all. </para>
            <para> 2. An event for build availability change. </para>
            A buildable is defined as a project in a solution, or a buildable target in a folder.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.RpcContracts.Build.IBuildService.BuildStarted">
            <summary>
            Raised when a build operation begins.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.RpcContracts.Build.IBuildService.BuildEnded">
            <summary>
            Raised when a build operation ends.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.RpcContracts.Build.IBuildService.BuildableItemsChanged">
            <summary>
            Raised when a change occurs in the set of buildable items.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.RpcContracts.Build.IBuildService.BuildProgressChanged">
            <summary>
            Raised when the build progress changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Build.IBuildService.RequestBuildEventsAsync(System.Threading.CancellationToken)">
            <summary>
            Request that build events be raised.
            If this method is not called, instances of <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.IBuildService" />
            will not raise the <see cref="E:Microsoft.VisualStudio.RpcContracts.Build.IBuildService.BuildableItemsChanged" />, <see cref="E:Microsoft.VisualStudio.RpcContracts.Build.IBuildService.BuildStarted" />,
            or <see cref="E:Microsoft.VisualStudio.RpcContracts.Build.IBuildService.BuildEnded" /> events.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task represeting the async operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Build.IBuildService.RequestBuildProgressChangedEventsAsync(System.Threading.CancellationToken)">
            <summary>
            Request that <see cref="E:Microsoft.VisualStudio.RpcContracts.Build.IBuildService.BuildProgressChanged" /> events be raised.
            If this method is not called, instances of <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.IBuildService" />
            will not raise the <see cref="E:Microsoft.VisualStudio.RpcContracts.Build.IBuildService.BuildProgressChanged" /> event.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task represeting the async operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Build.IBuildService.BuildAsync(Microsoft.VisualStudio.RpcContracts.Build.BuildAction,System.Collections.Generic.IReadOnlyList{System.String},System.IProgress{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Invokes the <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildAction" /> on a list of buildable items.
            </summary>
            <param name="buildAction">The <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildAction" /> to be executed.</param>
            <param name="buildableIds">The <see cref="P:Microsoft.VisualStudio.RpcContracts.Build.BuildableItem.Id" /> of <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildableItem" />s to be built.</param>
            <param name="progress">The build progress in percentage.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">Thrown if the caller passes an unrecognized buildable id.</exception>
            <returns>The completion task with a <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildResult" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Build.IBuildService.LaunchAsync(System.String,System.String,System.String,System.IProgress{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Builds and launches the requested buildable.
            </summary>
            <param name="buildableId">Id of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildableItem" /> to launch.</param>
            <param name="profileId">Id of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.LaunchProfile" /> to launch.</param>
            <param name="debugOption">Optional name of a debug option (e.g. StepInto).</param>
            <param name="buildProgress">The build progress in percentage.</param>
            <param name="cancellationToken">Cancellation token. Cancellation will not stop a debug session that is launched.</param>
            <returns>The completion task with a <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildResult" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Build.IBuildService.StartBuildOperationAsync(Microsoft.VisualStudio.RpcContracts.Build.BuildAction,System.Guid,System.Collections.Generic.IReadOnlyList{System.String},System.IProgress{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Invokes the <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildAction" /> on a list of buildable items.
            </summary>
            <param name="buildAction">The <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildAction" /> to be executed.</param>
            <param name="operationId">A unique identifier for the operation.</param>
            <param name="buildableIds">The <see cref="P:Microsoft.VisualStudio.RpcContracts.Build.BuildableItem.Id" /> of <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildableItem" />s to be built.</param>
            <param name="progress">The build progress in percentage.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ArgumentException">Thrown if the caller passes an unrecognized buildable id.</exception>
            <returns>The completion task with a <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildOperationResult" />.</returns>
            <remarks>Available only in version <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_7Services.BuildService" />.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Build.IBuildService.StartLaunchOperationAsync(System.Guid,System.String,System.String,System.String,System.IProgress{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Builds and launches the requested buildable.
            </summary>
            <param name="operationId">A unique identifier for the operation.</param>
            <param name="buildableId">Id of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildableItem" /> to launch.</param>
            <param name="profileId">Id of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.LaunchProfile" /> to launch.</param>
            <param name="debugOption">Optional name of a debug option (e.g. StepInto).</param>
            <param name="buildProgress">The build progress in percentage.</param>
            <param name="cancellationToken">Cancellation token. Cancellation will not stop a debug session that is launched.</param>
            <returns>The completion task with a <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildOperationResult" />.</returns>
            <remarks>Available only in version <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_7Services.BuildService" />.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Build.LaunchProfile">
            <summary>
            Context information used for launch operations (e.g. debug).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Build.LaunchProfile.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.LaunchProfile" /> class.
            </summary>
            <param name="id">The identity of the launch profile.</param>
            <param name="displayName">The name for the launch profile that is suitable for display to a user.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Build.LaunchProfile.Id">
            <summary>
            Gets the identity of the launch profile.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Build.LaunchProfile.DisplayName">
            <summary>
            Gets the name for the launch profile that is suitable for display to a user.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Build.WellKnownBuildableItemIds">
            <summary>
            Values for well-known <see cref="P:Microsoft.VisualStudio.RpcContracts.Build.BuildableItem.Id" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Build.WellKnownBuildableItemIds.Solution">
            <summary>
            A <see cref="P:Microsoft.VisualStudio.RpcContracts.Build.BuildableItem.Id" /> for the <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildableItem" /> that represents
            building an entire solution.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Build.WellKnownBuildableItemIds.EntireFolder">
            <summary>
            A <see cref="P:Microsoft.VisualStudio.RpcContracts.Build.BuildableItem.Id" /> for the <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.BuildableItem" /> that represents
            building all files in the open folder.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Caching.CacheContainerKey">
            <summary>
            A key to identify cache containers, the key data is used to link the container to a commit, component or configuration.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Caching.CacheContainerKey.EmptyDimensions">
            <summary>
            An empty dictionary that uses the required comparer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.CacheContainerKey.#ctor(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Caching.CacheContainerKey" /> struct.
            </summary>
            <param name="component">The name of the feature that owns the container. This should be a namespaced feature name that is unlikely to collide with other components that may be sharing this cache.</param>
            <param name="dimensions">
            Optional dictionary of arbitrary key=value pairs that serve as part of the "key" to the container.
            If this dictionary is an instance of <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2" />
            whose <see cref="P:System.Collections.Immutable.ImmutableSortedDictionary`2.KeyComparer" /> is set to <see cref="P:System.StringComparer.Ordinal" />,
            the collection instance will be used directly by the <see cref="P:Microsoft.VisualStudio.RpcContracts.Caching.CacheContainerKey.Dimensions" /> property; otherwise the collection will be copied.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Caching.CacheContainerKey.Component">
            <summary>
            Gets the feature that owns the container.
            </summary>
            <remarks>
            This should be a namespaced feature name that is unlikely to collide with other components that may be sharing this cache.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Caching.CacheContainerKey.Dimensions">
            <summary>
            Gets a dictionary of arbitrary key=value pairs that serve as part of the "key" to the container.
            </summary>
            <value>
            A dictionary whose keys are always sorted by the <see cref="P:System.StringComparer.Ordinal" />.
            </value>
            <remarks>
            <para>
            A <see langword="null" /> value is considered equivalent to an empty dictionary
            for purposes of looking up a cached value.
            </para>
            <para>Please see remarks on <see cref="T:Microsoft.VisualStudio.RpcContracts.Caching.ICacheService" /> for best practices for the data contained here to enable cache sharing across machines.</para>
            <para>Examples dimensions: Configuration=Debug, Path="src/a/b/c.cs".</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.CacheContainerKey.op_Equality(Microsoft.VisualStudio.RpcContracts.Caching.CacheContainerKey,Microsoft.VisualStudio.RpcContracts.Caching.CacheContainerKey)">
            <summary>
            Operator override for ==.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True if instances are equal to each other.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.CacheContainerKey.op_Inequality(Microsoft.VisualStudio.RpcContracts.Caching.CacheContainerKey,Microsoft.VisualStudio.RpcContracts.Caching.CacheContainerKey)">
            <summary>
            Operator override for !=.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True if instances are not equal to each other.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.CacheContainerKey.Equals(Microsoft.VisualStudio.RpcContracts.Caching.CacheContainerKey)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.CacheContainerKey.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.CacheContainerKey.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Caching.CacheException">
            <summary>
            An exception thrown by some members of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Caching.ICacheService" /> when the operation cannot be completed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.CacheException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Caching.CacheException" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.CacheException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Caching.CacheException" /> class.
            </summary>
            <param name="message"><inheritdoc cref="M:System.Exception.#ctor(System.String)" path="/param[@name='message']" /></param>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.CacheException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Caching.CacheException" /> class.
            </summary>
            <param name="message"><inheritdoc cref="M:System.Exception.#ctor(System.String,System.Exception)" path="/param[@name='message']" /></param>
            <param name="inner"><inheritdoc cref="M:System.Exception.#ctor(System.String,System.Exception)" path="/param[@name='inner']" /></param>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.CacheException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Caching.CacheException" /> class.
            </summary>
            <param name="info"><inheritdoc cref="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" path="/param[@name='info']" /></param>
            <param name="context"><inheritdoc cref="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" path="/param[@name='context']" /></param>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey">
            <summary>
            A key to identify a cache entry.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey.#ctor(Microsoft.VisualStudio.RpcContracts.Caching.CacheContainerKey,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey" /> struct.
            </summary>
            <param name="containerKey">The key for the container to access.</param>
            <param name="itemName">The name of the cache item.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey.#ctor(Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey" /> struct.
            </summary>
            <param name="copyFrom">The value to copy from.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey.ContainerKey">
            <summary>
            Gets the key for the container to access.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey.ItemName">
            <summary>
            Gets the name of the cache item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey.Version">
            <summary>
            Gets an optional value for the cache item that labels the version of the cached value
            such that a stale or replaced value becomes inaccessible.
            </summary>
            <remarks>
            If supplied when storing a cache entry, this value is stored alongside the value.
            If supplied when retrieving a cache entry, this value must match the stored checksum or the cached value will not be retrieved.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey.op_Equality(Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey,Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey)">
            <summary>
            Operator override for ==.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True if instances are equal to each other.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey.op_Inequality(Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey,Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey)">
            <summary>
            Operator override for !=.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True if instances are not equal to each other.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey.WithVersion(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey" /> struct
            with the specified value for <see cref="P:Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey.Version" />.
            </summary>
            <param name="version">The new version value.</param>
            <returns>The new key.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey.Equals(Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Caching.CacheServiceExtensions">
            <summary>
            Extension methods for the <see cref="T:Microsoft.VisualStudio.RpcContracts.Caching.ICacheService" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.CacheServiceExtensions.TryGetItemAsync(Microsoft.VisualStudio.RpcContracts.Caching.ICacheService,Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.RpcContracts.Caching.ICacheService.TryGetItemAsync(Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey,System.IO.Pipelines.PipeWriter,System.Threading.CancellationToken)" />
            <param name="cacheService">The cache service.</param>
            <param name="key"><inheritdoc cref="M:Microsoft.VisualStudio.RpcContracts.Caching.ICacheService.TryGetItemAsync(Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey,System.IO.Pipelines.PipeWriter,System.Threading.CancellationToken)" path="/param[@name='key']" /></param>
            <param name="cancellationToken"><inheritdoc cref="M:Microsoft.VisualStudio.RpcContracts.Caching.ICacheService.TryGetItemAsync(Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey,System.IO.Pipelines.PipeWriter,System.Threading.CancellationToken)" path="/param[@name='cancellationToken']" /></param>
            <returns>The stream carrying the cache value content, if the cached entry was found; otherwise <see langword="null" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.CacheServiceExtensions.SetItemAsync(Microsoft.VisualStudio.RpcContracts.Caching.ICacheService,Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey,System.IO.Stream,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.VisualStudio.RpcContracts.Caching.ICacheService.SetItemAsync(Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey,System.IO.Pipelines.PipeReader,System.Boolean,System.Threading.CancellationToken)" />
            <param name="cacheService">The cache service.</param>
            <param name="key"><inheritdoc cref="M:Microsoft.VisualStudio.RpcContracts.Caching.ICacheService.SetItemAsync(Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey,System.IO.Pipelines.PipeReader,System.Boolean,System.Threading.CancellationToken)" path="/param[@name='key']" /></param>
            <param name="content"><inheritdoc cref="M:Microsoft.VisualStudio.RpcContracts.Caching.ICacheService.SetItemAsync(Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey,System.IO.Pipelines.PipeReader,System.Boolean,System.Threading.CancellationToken)" path="/param[@name='content']" /></param>
            <param name="shareable"><inheritdoc cref="M:Microsoft.VisualStudio.RpcContracts.Caching.ICacheService.SetItemAsync(Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey,System.IO.Pipelines.PipeReader,System.Boolean,System.Threading.CancellationToken)" path="/param[@name='shareable']" /></param>
            <param name="cancellationToken"><inheritdoc cref="M:Microsoft.VisualStudio.RpcContracts.Caching.ICacheService.SetItemAsync(Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey,System.IO.Pipelines.PipeReader,System.Boolean,System.Threading.CancellationToken)" path="/param[@name='cancellationToken']" /></param>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Caching.ICacheService">
            <summary>
            Provides access to a cache for arbitrary data associated with a file, project, solution or repo.
            </summary>
            <remarks>
            <para>
            Note that for sharing across machines, all keys and values with paths should be normalized, use forward slashes for path separators,
            and be relative to the path specified by <see cref="M:Microsoft.VisualStudio.RpcContracts.Caching.ICacheService.GetRelativePathBaseAsync(System.Threading.CancellationToken)" />.
            </para>
            <para>
            The context that all cache access is associated with (e.g. solution, git repo/commit, etc.)
            is obtained when this service is activated and does not change automatically.
            Clients should dispose of the service and reactivate it after significant changes to context
            such as solution or folder open/close, or when a git repo's HEAD moves.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.ICacheService.GetRelativePathBaseAsync(System.Threading.CancellationToken)">
            <summary>
            Gets an absolute path that should be used as the basis for all relative paths stored in the cache for purposes of sharing across machines.
            </summary>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>An absolute path.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has already been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when there is no open context such as an open folder or solution to serve as a basis for computing a base path.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.ICacheService.CheckExistsAsync(Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey,System.Threading.CancellationToken)">
            <summary>
            Checks whether a value exists in the cache.
            </summary>
            <param name="key">The key of the value to access.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns><see langword="true" /> if a value for these inputs exist; <see langword="false" /> otherwise.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has already been disposed.</exception>
            <exception cref="T:Microsoft.VisualStudio.RpcContracts.Caching.CacheException">Thrown when the operation cannot be completed due to a failure in cache storage access.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.ICacheService.TryGetItemAsync(Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey,System.IO.Pipelines.PipeWriter,System.Threading.CancellationToken)">
            <summary>
            Tries to retrieve an item from cache that is assigned to a particular key.
            </summary>
            <param name="key">The key of the value to access.</param>
            <param name="writer">Writer to use to stream content.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns><see langword="true" /> if entry is found and data is streamed to writer, <see langword="false" /> otherwise.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has already been disposed.</exception>
            <exception cref="T:Microsoft.VisualStudio.RpcContracts.Caching.CacheException">Thrown when the operation cannot be completed due to a failure in cache storage access.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.ICacheService.SetItemAsync(Microsoft.VisualStudio.RpcContracts.Caching.CacheItemKey,System.IO.Pipelines.PipeReader,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Tries to add an item to cache and return a unique key. Stream will be read till end to determine content and size.
            </summary>
            <param name="key">The key of the value to access.</param>
            <param name="reader">Reader to utilize for reading contents of the entry.</param>
            <param name="shareable">A value indicating whether the value, item name, and container key are all portable for sharing with other machines.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> that completes when the cache entry has been written.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has already been disposed.</exception>
            <exception cref="T:Microsoft.VisualStudio.RpcContracts.Caching.CacheException">Thrown when the operation cannot be completed due to a failure in cache storage access.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when caller has no write permissions.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Caching.ICacheService.DownloadContainerAsync(Microsoft.VisualStudio.RpcContracts.Caching.CacheContainerKey,System.IProgress{Microsoft.VisualStudio.RpcContracts.ProgressData},System.Threading.CancellationToken)">
            <summary>
            Downloads all the container contents, if they are available in a remote cache.
            </summary>
            <param name="containerKey">Cache container key that describes the container.</param>
            <param name="progress">An optional means to receive progress updates on the download operation.</param>
            <param name="cancellationToken">Cancellation token to monitor.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if <paramref name="cancellationToken" /> is cancelled.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance has already been disposed.</exception>
            <exception cref="T:Microsoft.VisualStudio.RpcContracts.Caching.CacheException">Thrown when the operation cannot be completed due to a failure in cache storage access.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when caller has no write permissions.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.IClientNotificationService">
            <summary>
            Provides an API to send notifications from the server to the client, so they can be surfaced to the user.
            Obtainable from the <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_9Services.ClientNotificationService" /> service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.IClientNotificationService.NotifyErrorAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Surfaces a server error to the user.
            </summary>
            <param name="errorMessage">The text of the error message.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Commands.CommandPatterns">
            <summary>
            Indicates the command supports a pattern.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Commands.CommandPatterns.None">
            <summary>
            The command does not implement any patterns.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Commands.CommandPatterns.Executable">
            <summary>
            The command is executable.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Commands.CommandPatterns.Toggle">
            <summary>
            The command has a toggle state.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Commands.CommandPatterns.Dynamic">
            <summary>
            The command is dynamically created based on a definition.
            It can change it's display name.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Commands.CommandProperty">
            <summary>
            The command property that is being updated.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Commands.CommandProperty.Unset">
            <summary>
            Default.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Commands.CommandProperty.Pattern">
            <summary>
            A command's supported patterns.
            </summary>
            <remarks>
            Value is an integer representation of <see cref="T:Microsoft.VisualStudio.RpcContracts.Commands.CommandPatterns" />.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Commands.CommandProperty.IsSupported">
            <summary>
            A command's supported state.
            </summary>
            <remarks>
            Value is 'T' for true, 'F' for false, or null.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Commands.CommandProperty.IsEnabled">
            <summary>
            A command's enabled state.
            </summary>
            <remarks>
            Value is 'T' for true, 'F' for false, or null.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Commands.CommandProperty.IsChecked">
            <summary>
            A command's checked state.
            </summary>
            <remarks>
            Value is 'T' for true, 'F' for false, or null.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Commands.CommandProperty.DisplayName">
            <summary>
            A command's display name.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Commands.CommandProperty.BaseDefinitionId">
            <summary>
            A command's base metadata definition id.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Commands.ICommandSetProvider">
            <summary>
            Provides a way to expose a set of commands.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Commands.ICommandSetProvider.ActivateCommandSetAsync(System.Threading.CancellationToken)">
            <summary>
            Indicates that the commands in this set are currently in scope and should
            monitor state and report updates to the client over
            an <see cref="T:Microsoft.VisualStudio.RpcContracts.Commands.IUpdateReceiver" />.
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task to track the asynchronous call status.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Commands.ICommandSetProvider.DeactivateCommandSetAsync(System.Threading.CancellationToken)">
            <summary>
            Indicates that the commands in this set are currently out
            of scope.
            </summary>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task to track the asynchronous call status.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Commands.ICommandSetProvider.ExecuteCommandAsync(System.UInt16,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Called to execute a command.
            </summary>
            <param name="id">The id of this command in this command set.</param>
            <param name="context">Captured command context properties.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task to track the asynchronous call status.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Commands.IUpdateReceiver">
            <summary>
            Used to send command update events over an RPC connection from
            the <see cref="T:Microsoft.VisualStudio.RpcContracts.Commands.ICommandSetProvider" /> to the client.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Commands.IUpdateReceiver.UpdateAsync(Microsoft.VisualStudio.RpcContracts.Commands.Update,System.Threading.CancellationToken)">
            <summary>
            Sends a batch of property updates to the client.
            </summary>
            <param name="update">A batch of update notifications.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task to track the asyncronous call status.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate">
            <summary>
            Used to send updated command property values.
            This struct is immutable.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate.#ctor(Microsoft.VisualStudio.RpcContracts.Commands.CommandProperty,System.UInt16,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate" /> struct.
            </summary>
            <param name="property">The property updated.</param>
            <param name="id">The command id.</param>
            <param name="value">The serialized property value.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate.Property">
            <summary>
            Gets the property updated.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate.Id">
            <summary>
            Gets the command id.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate.Value">
            <summary>
            Gets the serialized property value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate.op_Equality(Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate,Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate)">
            <summary>
            Equality comparison operator.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>true</c> if the left and right operand are equivalent.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate.op_Inequality(Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate,Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate)">
            <summary>
            Inequality comparison operator.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>true</c> if the left and right operand are different.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate.Create(Microsoft.VisualStudio.RpcContracts.Commands.CommandProperty,System.UInt16,System.String)">
            <summary>
            Creates a new property update for a string value.
            </summary>
            <param name="property">The property updated.</param>
            <param name="id">The command id.</param>
            <param name="value">The property value.</param>
            <returns>A new <see cref="T:Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate.Create(Microsoft.VisualStudio.RpcContracts.Commands.CommandProperty,System.UInt16,System.Nullable{System.Boolean})">
            <summary>
            Creates a new property update for a bool value.
            </summary>
            <param name="property">The property updated.</param>
            <param name="id">The command id.</param>
            <param name="value">The property value.</param>
            <returns>A new <see cref="T:Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate.Create(Microsoft.VisualStudio.RpcContracts.Commands.CommandProperty,System.UInt16,System.Nullable{System.Int32})">
            <summary>
            Creates a new property update for an int value.
            </summary>
            <param name="property">The property updated.</param>
            <param name="id">The command id.</param>
            <param name="value">The property value.</param>
            <returns>A new <see cref="T:Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate.Create(Microsoft.VisualStudio.RpcContracts.Commands.CommandProperty,System.UInt16,System.Nullable{System.Int64})">
            <summary>
            Creates a new property update for a long value.
            </summary>
            <param name="property">The property updated.</param>
            <param name="id">The command id.</param>
            <param name="value">The property value.</param>
            <returns>A new <see cref="T:Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate.GetValueAsString">
            <summary>
            Convert the value to a string.
            </summary>
            <returns>The value as a string.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate.GetValueAsBool">
            <summary>
            Convert the value to a bool.
            </summary>
            <returns>The value as a bool.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate.GetValueAsInt">
            <summary>
            Convert the value to a int.
            </summary>
            <returns>The value as a int.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate.GetValueAsLong">
            <summary>
            Convert the value to a long.
            </summary>
            <returns>The value as a long.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate.Equals(Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Commands.Update">
            <summary>
            Contains an immutable batch of updates for the commands in a command set.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Commands.Update.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.RpcContracts.Commands.PropertyUpdate})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Commands.Update" /> class.
            </summary>
            <param name="updates">The set of property value updates.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Commands.Update.Updates">
            <summary>
            Gets the set of property value updates.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Commands.Update.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Commands.Update.Equals(Microsoft.VisualStudio.RpcContracts.Commands.Update)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Commands.Update.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.ConnectedWorkspace.IConnectedWorkspaceService">
            <summary>
            Represents a brokered service for a connected workspace (for example Cloud Environment workspace).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.ConnectedWorkspace.IConnectedWorkspaceService.GetFilesAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a collection of files that exist in the given path.
            </summary>
            <param name="relativePath">The relative path to the directory to
            search for files in.</param>
            <param name="filter">The search string to match against the names
            of files in path. This parameter can contain a combination of valid
            literal path and wildcard (* and ?) characters, but it doesn't
            support regular expressions. </param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A read only collection of the full names (including paths)
            for the files in the directory specified by relativePath.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.ConnectedWorkspace.IConnectedWorkspaceService.GetFoldersAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a collection of folders that exist in the given path.
            </summary>
            <param name="relativePath">The relative path to the directory to
            search for folders in.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A read only collection of the full names (including paths)
            for the folders in the directory specified by relativePath.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.ConnectedWorkspace.IConnectedWorkspaceService.OpenFolderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Opens a folder pointed to by the given path. This is equivalent to
            "loading" the folder for use.
            </summary>
            <param name="relativePath">The relative path to the folder to open.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represent the completion of opening the
            folder.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.ContextRuleMonitor.ContextRuleMetadata">
            <summary>
            Represents information about a context rule to be monitored.
            A context rule consists of a set of terms and an expression that describes how the terms are combined.
            </summary>
            <remarks>
            <example>
            As an example, consider the following context rule:
            <code>
                Expression: "(IsCSharp &amp; ConfigFileAdded) | IsVB"
                <para />
                Terms: {
                    "IsCSharp": "SolutionHasProjectCapability:CSharp",
                    "ConfigFileAdded": "ProjectAddedItem:.config$",
                    "IsVB": "SolutionHasProjectCapability:VB"
                }
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.ContextRuleMonitor.ContextRuleMetadata.#ctor(System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.ContextRuleMonitor.ContextRuleMetadata" /> class.
            </summary>
            <param name="identifier">A unique identifier for this rule.</param>
            <param name="expression">A string specifying how the terms should be combined.</param>
            <param name="terms">The set of terms, keyed by their representation in the expression.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.ContextRuleMonitor.ContextRuleMetadata.Identifier">
            <summary>
            Gets the rule's identifier.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.ContextRuleMonitor.ContextRuleMetadata.Expression">
            <summary>
             Gets the rule's expression.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.ContextRuleMonitor.ContextRuleMetadata.Terms">
            <summary>
            Gets the set of terms to be evaluated.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.ContextRuleMonitor.ContextRuleStateChangedEventArgs">
            <summary>
            Event arguments for <see cref="E:Microsoft.VisualStudio.RpcContracts.ContextRuleMonitor.IContextRuleMonitorService.ContextRuleStateChanged" /> event that raises when a rule's state changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.ContextRuleMonitor.ContextRuleStateChangedEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.ContextRuleMonitor.ContextRuleStateChangedEventArgs" /> class.
            </summary>
            <param name="identifier">The ID of the rule whose state has changed.</param>
            <param name="isActive">The new state of the rule.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.ContextRuleMonitor.ContextRuleStateChangedEventArgs.Identifier">
            <summary>
            Gets the rule's identifier.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.ContextRuleMonitor.ContextRuleStateChangedEventArgs.IsActive">
            <summary>
            Gets a value indicating whether the rule is active.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.ContextRuleMonitor.IContextRuleMonitorService">
            <summary>
            Represents a service to manage and monitor state of IDE context rules.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.RpcContracts.ContextRuleMonitor.IContextRuleMonitorService.ContextRuleStateChanged">
            <summary>
            Occurs when the state of a context rule changes, such as when the Rule becomes active.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.ContextRuleMonitor.IContextRuleMonitorService.RegisterContextRuleAsync(Microsoft.VisualStudio.RpcContracts.ContextRuleMonitor.ContextRuleMetadata,System.Threading.CancellationToken)">
            <summary>
            Creates a new Context rule that is monitored and requests that a <see cref="E:Microsoft.VisualStudio.RpcContracts.ContextRuleMonitor.IContextRuleMonitorService.ContextRuleStateChanged" />
            event be raised when the rule changes state, such as becoming active.
            </summary>
            <param name="ruleMetadata">The data object representing the context rule to monitor.</param>
            <param name="cancellationToken">A cancellation token to cancel the in-progress invocation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask" /> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic">
            <summary>
            Class containing all the information needed to describe a diagnostic.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic.#ctor(System.String,System.String,Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticSeverity,Microsoft.VisualStudio.RpcContracts.Utilities.Range,Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticTags,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticRelatedInformation},System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic" /> class.
            </summary>
            <param name="message">A description of the diagnostic.</param>
            <param name="code">The code associated with the diagnostic.</param>
            <param name="severity">The severity of the diagnostic.</param>
            <param name="range">The location of the diagnostic.</param>
            <param name="tags"><see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticTags" /> associated with the
            diagnostic.</param>
            <param name="relatedInformation">Additional information related to
            the diagnostic.</param>
            <param name="expandedMessage">An expanded description of the diagnostic.</param>
            <param name="source">A localized string describing the source of the
            diagnostic ("lint", "msbuild", etc.).</param>
            <param name="helpLink">A URL to navigate to if the user asks for help
            on the diagnostic.</param>
            <param name="diagnosticRank">An indication of the whether the diagnostic could be side
            effect of another diagnostic. Used for the default sort.</param>
            <param name="diagnosticType">A localized string describing the class of the diagnostic
            ("Performance", "Security", "Style", etc.).
            </param>
            <param name="projects">The projects in which this diagnostic was reported.</param>
            <param name="identifier">The identifier used to indicate whether two distinct diagnostics (possibly from different sources) can be merged.</param>
            <param name="toolTip">The tool tip displayed when the user hovers over the error in the error list.</param>
            <param name="outputId">The identifier used to link the diagnostic to a line of text in the output window.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic.#ctor(System.String,System.String,Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticSeverity,Microsoft.VisualStudio.RpcContracts.Utilities.Range,System.String,Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticTags,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticRelatedInformation},System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic" /> class.
            </summary>
            <param name="message">A description of the diagnostic.</param>
            <param name="code">The code associated with the diagnostic.</param>
            <param name="severity">The severity of the diagnostic.</param>
            <param name="range">The location of the diagnostic.</param>
            <param name="customEditorDiagnosticRepresentation">The name of the EditorFormatMapDefinition used to represent the diagnostic.</param>
            <param name="tags"><see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticTags" /> associated with the
            diagnostic.</param>
            <param name="relatedInformation">Additional information related to
            the diagnostic.</param>
            <param name="expandedMessage">An expanded description of the diagnostic.</param>
            <param name="source">A localized string describing the source of the
            diagnostic ("lint", "msbuild", etc.).</param>
            <param name="helpLink">A URL to navigate to if the user asks for help
            on the diagnostic.</param>
            <param name="diagnosticRank">An indication of the whether the diagnostic could be side
            effect of another diagnostic. Used for the default sort.</param>
            <param name="diagnosticType">A localized string describing the class of the diagnostic
            ("Performance", "Security", "Style", etc.).
            </param>
            <param name="projects">The projects in which this diagnostic was reported.</param>
            <param name="identifier">The identifier used to indicate whether two distinct diagnostics (possibly from different sources) can be merged.</param>
            <param name="toolTip">The tool tip displayed when the user hovers over the error in the error list.</param>
            <param name="outputId">The identifier used to link the diagnostic to a line of text in the output window.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic.Message">
            <summary>
            Gets the localized description of the diagnostic.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic.Code">
            <summary>
            Gets the diagnostic code for the diagnostic.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic.Severity">
            <summary>
            Gets the severity of the diagnostic.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic.Range">
            <summary>
            Gets the location of the diagnostic in the document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic.Tags">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticTags" /> associated with the diagnostic.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic.RelatedInformation">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticRelatedInformation" /> associated with the diagnostic.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic.ExpandedMessage">
            <summary>
            Gets the expanded description of the diagnostic.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic.Source">
            <summary>
            Gets a localized string describing the tool that generated the diagnostic (e.g. "FxCop", "msbuild", etc.).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic.HelpLink">
            <summary>
            Gets the help like that describes the diagnostic.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic.DiagnosticRank">
            <summary>
            Gets an integer indicating the rank of the diagnostic.
            </summary>
            <remarks>
            <para>Diagnostics are sorted based on their diagnostic rank.</para>
            <para>Recommended values are Highest = 100, High = 200, Default = 300, Low = 400, Lowest = 500.</para>
            <para>No value will be treated as Default (300).</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic.DiagnosticType">
            <summary>
            Gets a localized string describing the type of the diagnostic (e.g. "Security", "Performance", "Threading", etc.).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic.Projects">
            <summary>
            Gets the projects in which this diagnostic was reported.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic.Identifier">
            <summary>
            Gets the identifier used to indicate whether two distinct diagnsotics (possibly from different sources) can be merged.
            </summary>
            <remarks>
            Two distinct diagnostics at the same location in may be merged if they both have the same identifier.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic.ToolTip">
            <summary>
            Gets the tool tip displayed when the user hovers over the error in the error list.
            </summary>
            <remarks>
            <para>If null, the <see cref="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic.Message" /> will be used as the tool tip.</para>
            <para>If no tool tip should be displayed, use the <see cref="F:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticTags.SuppressEditorToolTip" /> to prevent the tool tip from being generated.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic.OutputId">
            <summary>
            Gets the identifier used to link the diagnostic to a line of text in the output window.
            </summary>
            <remarks>
            <para>
            Every diagnostic can be associated with a line of text in the build output window by settings its giving it a (guid, id) pair that corresponds
            the the (guid, id) pair used to write to the output pane (using IVsOutputWindowPane3.OutputStringWithId).
            </para>
            <para>
            The guid for a diagnostic is specified by the <see cref="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection.OutputKey" /> property of the collection that contains it.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic.CustomEditorDiagnosticRepresentation">
            <summary>
            Gets the name of EditorFromatDefiniton to override the default representation of diagnostics in the editor offered by the Diagnostics Service.
            </summary>
            <remarks>
            <para>
            Diagnostics are usually represented by squiggles in the VS editor. Each <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticSeverity" /> will have a default representation associated to it.
            However, there are times when clients want to express different types of diagnostics having the same severity in different representations.
            For example a client would want to denote compile time errors via red squiggles, where as errors from build / configuration via purple squiggles although both have the same severity as <see cref="F:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticSeverity.Error" />.
            </para>
            <para>
            The field is optional. If not provided, default represntations would be used for the corresponding <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticSeverity" />.
            The string, if provided, should exactly match the corresponding name of the existing inproc EditorFormatDefiniton used as representation of the diagnositcs.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection">
            <summary>
            Class containing one collection of diagnostics for a document (but not, necessarily, all diagnostics for that document).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection.#ctor(System.Uri,System.Int32,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection" /> class.
            </summary>
            <param name="documentMoniker">URI of the document containing the diagnostics.
            The URI is always a remote URI i.e. a URI that can be understood by both parties (server and client / host and guest) in shared scenarios.
            </param>
            <param name="documentVersionNumber">Version number of the document.</param>
            <param name="diagnostics">List of diagnostics found in <paramref name="documentMoniker" />.</param>
            <param name="identifier">An identfier for this collection.</param>
            <param name="supersedes">The identifier of the <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection" /> that is superceded by this collection.</param>
            <param name="outputKey">The output window key used to associate diagnostics in the collection with a line of text in the output window.</param>
            <remarks>
            <para><see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection" />s, when being reported via <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticManagerService" />, should use <paramref name="documentMoniker" /> that correspond to the <see cref="T:System.Uri" />
            that corresponds to the location of the document on the server. </para>
            <para><see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection" /> sent via the <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticViewerService" /> will always use <see cref="T:System.Uri" />s that correspond to the remote moniker for the document.</para>
            <para>Note that remote monikers can change when a LiveShare session starts or ends, so it is best to never persist a documents remote moniker: instead convert to a local file path and convert
            on demand.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection.DocumentMoniker">
            <summary>
            Gets the URI of the document containing the diagnostics.
            The URI is always a remote URI i.e. a URI that can be understood by both parties (server and client / host and guest) in shared scenarios.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection.DocumentVersionNumber">
            <summary>
            Gets the version number of the document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection.Diagnostics">
            <summary>
            Gets the list of diagnostics for <see cref="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection.DocumentMoniker" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection.Identifier">
            <summary>
            Gets the identifier for this collection.
            </summary>
            <remarks>
            This <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection" /> is superceeded if there is another <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection" /> for the same document whose
            <see cref="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection.Supersedes" /> property matches the <see cref="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection.Identifier" /> of this collection.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection.Supersedes">
            <summary>
            Gets the diagnostic version for this collection.
            </summary>
            <remarks>
            This <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection" /> will superceed another <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection" /> if the <see cref="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection.Identifier" /> of the
            other collection is the same as the <see cref="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection.Supersedes" /> of this collection.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection.OutputKey">
            <summary>
            Gets the output window key used to associate diagnostics in the collection with a line of text in the output window.
            The identifier for a specific diagnostic is specified by the <see cref="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic.OutputId" /> property of the collection that contains it.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticManagerRemovedEventArgs">
            <summary>
            Event args for the event that indicates one or more diagnostic managers have been removed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticManagerRemovedEventArgs.#ctor(System.Int32,System.Collections.Generic.IReadOnlyList{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticManagerRemovedEventArgs" /> class.
            </summary>
            <param name="serverState">Server state after updating the diagnostics (this is a counter that is incremented every time there is a change
            on the server you can use to determine the relative ordering between this event and the diagnostics reported via
            <see cref="M:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticViewerService.RequestDiagnosticsAsync(System.IProgress{Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticReport},System.Threading.CancellationToken)" />.</param>
            <param name="diagnosticManagerIds">IDs of the removed managers.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticManagerRemovedEventArgs.ServerState">
            <summary>
            Gets the server state after updating the diagnostics (this is a counter that is incremented every time there is a change
            on the server you can use to determine the relative ordering between this event and the diagnostics reported via
            <see cref="M:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticViewerService.RequestDiagnosticsAsync(System.IProgress{Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticReport},System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticManagerRemovedEventArgs.DiagnosticManagerIds">
            <summary>
            Gets the IDs of the diagnostic managers (and all of their diagnostics) that are being removed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticRelatedInformation">
            <summary>
            Represents a related message and source code location for a diagnostic.
            </summary>
            <remarks>
            <para>
            This should be used to point to code locations that cause or are related to a diagnostics, e.g when duplicating
             a symbol in a scope.
             </para>
            <para>This class is intended to be very similar to the LSP DiagnosticRelatedInformation.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticRelatedInformation.#ctor(System.String,System.Int32,Microsoft.VisualStudio.RpcContracts.Utilities.Range,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticRelatedInformation" /> class.
            </summary>
            <param name="documentMoniker">The name of the document containing the diagnostics.</param>
            <param name="documentVersionNumber">The version number of the document.</param>
            <param name="range">The location in <paramref name="documentMoniker" /> of the related information.</param>
            <param name="message">The message of this related diagnostic information.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticRelatedInformation.DocumentMoniker">
            <summary>
            Gets the name of the document containing the diagnostics.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticRelatedInformation.DocumentVersionNumber">
            <summary>
            Gets the version number of the document.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticRelatedInformation.Range">
            <summary>
            Gets the location in <see cref="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticRelatedInformation.DocumentMoniker" /> of the related information.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticRelatedInformation.Message">
            <summary>
            Gets the message of this related diagnostic information.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticReport">
            <summary>
            A class that contain all the information associated with a group of diagnostics.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticReport.#ctor(System.Int32,System.String,System.Int32,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticReport" /> class.
            </summary>
            <param name="managerId">ID of the manager that created the diagnostics.</param>
            <param name="generatorId">ID of the generator within the manager that created the diagnostics.</param>
            <param name="serverState">Server state after updating the diagnostics (this is a counter that is incremented every time there is a change.</param>
            <param name="diagnosticCollections">All the diagnostics associated with the <see cref="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticReport.ManagerId" />, <see cref="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticReport.GeneratorId" /> pair.</param>
            <remarks>
            <para>
            <paramref name="managerId" /> is a unique ID provided for each component reporting diagnostics. Each diagnostic collection will have a unique identifier consisting of
            (<paramref name="managerId" />, <paramref name="generatorId" />).
            </para>
            <para>
            <paramref name="generatorId" /> defines a unique set of diagnostics produced by a manager. Each manager is responsible for creating is generator IDs.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticReport.ManagerId">
            <summary>
            Gets the ID of the manager that created the diagnostics.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticReport.GeneratorId">
            <summary>
            Gets the ID of the generator within the manager that created the diagnostics.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticReport.ServerState">
            <summary>
            Gets the server state after updating the diagnostics (this is a counter that is incremented every time there is a change
            on the server).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticReport.DiagnosticCollections">
            <summary>
            Gets all the diagnostics associated with the <see cref="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticReport.ManagerId" />, <see cref="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticReport.GeneratorId" /> pair.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticSeverity">
            <summary>
            An enumeration of the severity of a diagnostics.
            </summary>
            <remarks>
            The enumeration values match those in LSP DiagnosticSeverity.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticSeverity.Error">
            <summary>
            An error.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticSeverity.Warning">
            <summary>
            A warning.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticSeverity.Information">
            <summary>
            An informational item.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticSeverity.Hint">
            <summary>
            A hint or suggestion.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticTags">
            <summary>
            Metadata about the diagnostic.
            </summary>
            <remarks>
            The enumeration values match those in LSP DiagnosticTag.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticTags.None">
            <summary>
            No tags associated with the diagnostic.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticTags.Unnecessary">
            <summary>
            Unused or unnecessary code.
            </summary>
            <remarks>
            Clients are allowed to render diagnostics with this tag faded out instead of having
            an error squiggle.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticTags.Deprecated">
            <summary>
            Deprecated or obsolete code.
            </summary>
            <remarks>
            Clients are allowed to rendered diagnostics with this tag strike through.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticTags.BuildError">
            <summary>
            Diagnostic coming from the build (see VSDiagnosticTags.BuildError).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticTags.PotentialDuplicate">
            <summary>
            Diagnostics with this tag will be considered duplicates and hidden from the end-user when the <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection" /> that contains it is superceeded.
            </summary>
            <remarks>
            A <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection" /> is superceeded if there is another <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection" /> for the same document whose
            <see cref="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection.Supersedes" /> matches its <see cref="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection.Identifier" />.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticTags.HiddenInErrorList">
            <summary>
            Do not show this diagnostic in the error list.
            </summary>
            <remarks>
            By default, diagnostics with a <see cref="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic.Severity" /> not equal to <see cref="F:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticSeverity.Hint" /> are shown in the error list.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticTags.VisibleInErrorList">
            <summary>
            Show this diagnostic in the error list.
            </summary>
            <remarks>
            By default, diagnostics with a <see cref="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.Diagnostic.Severity" /> not equal to <see cref="F:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticSeverity.Hint" /> are shown in the error list.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticTags.HiddenInEditor">
            <summary>
            Do not drawn an error indicator in the editor.
            </summary>
            <remarks>
            <para>All errors, by default, are highlighted in the editor with some type of indicator (either a squiggle or an ellipsis).</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticTags.SuppressEditorToolTip">
            <summary>
            Do not show a tool tip for the error in the editor.
            </summary>
            <remarks>
            <para>All errors, by default, will show a tool tip.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticUpdatedEventArgs">
            <summary>
            Instance of the event args for the <see cref="E:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticViewerService.DiagnosticsUpdated" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticUpdatedEventArgs.#ctor(System.Boolean,Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticReport)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticUpdatedEventArgs" /> class.
            </summary>
            <param name="append">Should <paramref name="diagnosticsReport" /> be appended to or replace the existing diagnostics.</param>
            <param name="diagnosticsReport">New diagnostics.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticUpdatedEventArgs.Append">
            <summary>
            Gets a value indicating whether gets whether the diagnostics in <see name="DiagnosticsReport" /> be appended to or replace the existing diagnostics.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticUpdatedEventArgs.DiagnosticsReport">
            <summary>
            Gets the new diagnostics.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticManagerService">
            <summary>
            Service for reporting diagnostics.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticManagerService.SetDiagnosticsAsync(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection},System.Threading.CancellationToken)">
            <summary>
            Replace the previously reported diagnostics for <paramref name="generatorId" /> with <paramref name="diagnostics" />.
            </summary>
            <param name="generatorId">A unique ID associated with generator of a set of diagnostics.</param>
            <param name="diagnostics">New diagnostics.</param>
            <param name="cancellationToken">A cancellation token to cancel the in-progress invocation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <remarks><para>
            Each instance of an <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticManagerService" /> is responsible for creating is own generator IDs and there is no need for the generator IDs distinct
            from the generator IDs used by a different <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticManagerService" />.
            </para></remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticManagerService.AppendDiagnosticsAsync(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticCollection},System.Threading.CancellationToken)">
            <summary>
            Append the diagnostics in <paramref name="diagnostics" /> to the previously reported diagnostics for <paramref name="generatorId" />.
            </summary>
            <param name="generatorId">A unique ID associated with generator of a set of diagnostics.</param>
            <param name="diagnostics">New diagnostics.</param>
            <param name="cancellationToken">A cancellation token to cancel the in-progress invocation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <remarks><para>
            Each instance of an <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticManagerService" /> is responsible for creating is own generator IDs and there is no need for the generator IDs distinct
            from the generator IDs used by a different <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticManagerService" />.
            </para></remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticManagerService.ClearDiagnosticsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Clear all diagnostics associated with the specified <paramref name="generatorId" />.
            </summary>
            <param name="generatorId">Generator ID of the diagnostics that are to be cleared.</param>
            <param name="cancellationToken">A cancellation token to cancel the in-progress invocation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <remarks>
            <para><paramref name="generatorId" />The ID of the diagnostics that should be removed.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticManagerService.ClearAllDiagnosticsAsync(System.Threading.CancellationToken)">
            <summary>
            Remove all diagnostics created by the <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticManagerService" />.
            </summary>
            <param name="cancellationToken">A cancellation token to cancel the in-progress invocation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticViewerService">
            <summary>
            Service clients uses to connect to the diagnostic service.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticViewerService.DiagnosticsUpdated">
            <summary>
            Occurs when new diagnostics are reported to the <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticManagerService" />.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticViewerService.DiagnosticManagerRemoved">
            <summary>
            Occurs when a manager is disconnected.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticViewerService.RequestDiagnosticsAsync(System.IProgress{Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.DiagnosticReport},System.Threading.CancellationToken)">
            <summary>
            Request all diagnostics known to the diagnostic service.
            </summary>
            <param name="report">An receiver for diagnostics reports.</param>
            <param name="cancellationToken">A cancellation token to cancel the in-progress invocation.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.NoDocumentAssociatedUri">
            <summary>
            Representation of an Uri that can be used to specify a diagnostic collection is not associated with any document.
            </summary>
            <remarks> Introduced in <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_9Services.DiagnosticManagerBroadcastService" />.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.NoDocumentAssociatedUri.StringRepresentation">
            <summary>
            Gets string representation of an the no documented associated Uri. Can be used to create an instance of <see cref="T:System.Uri" /> class which is equivalent to the instance of this type.
            Note: The actual string representation can change and is an implementation detail.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.NoDocumentAssociatedUri.Instance">
            <summary>
            Instance of an Uri that is used to represent a diagnostic collection that is not associated to any document.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.ErrorCodes">
             <summary>
             Defines error codes to use for <see cref="P:StreamJsonRpc.RemoteInvocationException.ErrorCode" />.
             Servers should throw <see cref="T:StreamJsonRpc.RemoteInvocationException" /> with the appropriate
             error code when an existing .NET exception does not exist for the condition being
             reported.
            
             See https://github.com/microsoft/vs-streamjsonrpc/blob/master/doc/exceptions.md.
             </summary>
             <remarks>
             None of the error codes defined herein should be in the range [-32768, -32000],
             since those values are reserved by the JSON-RPC protocol.
            
             See https://www.jsonrpc.org/specification#error_object.
             </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.ErrorCodes.FileAlreadyExists">
            <summary>
            The error code indicating that a file already exists.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.ErrorCodes.ExceptionFromCode(System.Int32,System.String,System.Object,System.Object)">
            <summary>
            Creates a <see cref="T:StreamJsonRpc.RemoteInvocationException" /> with a specified error code.
            </summary>
            <param name="errorCode">The error code.</param>
            <param name="message">The message for the exception.</param>
            <param name="errorData">The error data for the exception.</param>
            <param name="deserializedErrorData">
            The deserialized error data for the exception.
            </param>
            <returns>the <see cref="T:StreamJsonRpc.RemoteInvocationException" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Extensibility.ExtensionMetadata">
            <summary>
            Metadata related to the set of extensions that have been added and removed since the last update notification.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Extensibility.ExtensionMetadata.#ctor(System.Collections.Generic.IReadOnlyCollection{Microsoft.VisualStudio.RpcContracts.Extensibility.SectionMetadata},System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Extensibility.ExtensionMetadata" /> class.
            </summary>
            <param name="added">Extension metadata added since last event, can be null if no extensions were added.</param>
            <param name="removed">Extension metadata removed since last event, can be null if no extensions were removed.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Extensibility.ExtensionMetadata.Added">
            <summary>
            Gets the metadata for extensions added since the last notification.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Extensibility.ExtensionMetadata.Removed">
            <summary>
            Gets the metadate entry keys that were removed since the last notification.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Extensibility.IExtensionMetadataService">
            <summary>
            Represents a service to query metadata from extensions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Extensibility.IExtensionMetadataService.SubscribeForMetadataEventsAsync(System.Collections.Generic.IEnumerable{System.String},System.IObserver{Microsoft.VisualStudio.RpcContracts.Extensibility.ExtensionMetadata},System.Threading.CancellationToken)">
            <summary>
            Attaches an observer for updates to sections with the specified names.
            If this is the first subscription, it will notify the observer with the current set of metadata.
            </summary>
            <param name="sectionNames">The names of the sections that the observer is interested in being notified of.</param>
            <param name="observer">An observer of extension metadata changes.</param>
            <param name="cancellationToken">A cancellation token to cancel the in-progress invocation.</param>
            <returns>A value that may be disposed of to unregister the <paramref name="observer" /> from future notifications.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Extensibility.SectionMetadata">
            <summary>
            Gets the metadata that was added during a changed notification for a specific section.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Extensibility.SectionMetadata.#ctor(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,Newtonsoft.Json.Linq.JToken})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Extensibility.SectionMetadata" /> class.
            </summary>
            <param name="name">The name of the section.</param>
            <param name="metadata">A dictionary of the added metadata.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Extensibility.SectionMetadata.Name">
            <summary>
            Gets the name of the section.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Extensibility.SectionMetadata.Metadata">
            <summary>
            Gets the metadata that was added during a changed notification where the key is a unique identifier for the extension and the value is the added metadata.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryChangedEventArgs">
            <summary>
            The arguments that are sent with the <see cref="E:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.DirectoryEntryChanged" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryChangedEventArgs.#ctor(Microsoft.VisualStudio.RpcContracts.FileSystem.WatchResult,Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryInfo,Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryChangeType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryChangedEventArgs" /> class.
            </summary>
            <param name="watchResult">
            Identifies the call to <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.WatchFileAsync(System.Uri,System.Threading.CancellationToken)" /> or
            <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.WatchDirectoryAsync(System.Uri,System.Boolean,System.Threading.CancellationToken)" /> that resulted in the
            <see cref="E:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.DirectoryEntryChanged" /> event being raised.
            </param>
            <param name="changedEntryInfo">Information about directory entry that changed.</param>
            <param name="changeType">The type of change event that occurred.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryChangedEventArgs.#ctor(Microsoft.VisualStudio.RpcContracts.FileSystem.WatchResult,System.Uri,Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryInfo,Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryChangeType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryChangedEventArgs" /> class.
            </summary>
            <param name="watchResult">
            Identifies the call to <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.WatchFileAsync(System.Uri,System.Threading.CancellationToken)" /> or
            <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.WatchDirectoryAsync(System.Uri,System.Boolean,System.Threading.CancellationToken)" /> that resulted in the
            <see cref="E:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.DirectoryEntryChanged" /> event being raised.
            </param>
            <param name="uri">The <see cref="P:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryChangedEventArgs.Uri" /> of the changed file or directory.</param>
            <param name="changedEntryInfo">
            Information about directory entry that changed.  This may be null if it is too
            expensive for the provider to supply this information on every change event.
            </param>
            <param name="changeType">The type of change event that occurred.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryChangedEventArgs.WatchResult">
            <summary>
            Gets the identifier for the call to <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.WatchDirectoryAsync(System.Uri,System.Boolean,System.Threading.CancellationToken)" />
            that resulted in this event being raised.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryChangedEventArgs.Uri">
            <summary>
            Gets the Uri of the changed file or directory.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryChangedEventArgs.ChangedEntryInfo">
            <summary>
            Gets information about the directory entry that changed.  This may be null if it
            is too expensive for the provider to supply this information on every change event.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryChangedEventArgs.ChangeType">
            <summary>
            Gets the type of change event that occurred.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryChangeType">
            <summary>
            Identifies the type of change that happened to a file or directory.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryChangeType.None">
            <summary>
            No change occurred.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryChangeType.Changed">
            <summary>
            The contents or metadata of a file have changed. This change type is not
            used for directories.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryChangeType.Created">
            <summary>
            A file or directory has been created.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryChangeType.Deleted">
            <summary>
            A file or directory has been deleted.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryInfo">
            <summary>
            Contains the properties of a directory entry (a file or a directory).
            This is the base class for both <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.FileInfo" /> and <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryInfo" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryInfo.#ctor(System.Uri,System.IO.FileAttributes,System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryInfo" /> class.
            </summary>
            <param name="uri">The URI of the directory entry.</param>
            <param name="attributes">The attributes of directory entry.</param>
            <param name="creationTime">The creation time of the directory entry.</param>
            <param name="lastWriteTime">The last write time of the directory entry.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryInfo.Uri">
            <summary>
            Gets the URI for the directory entry.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryInfo.Attributes">
            <summary>
            Gets the attributes of the directory entry.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryInfo.CreationTime">
            <summary>
            Gets the creation time for the directory entry (UTC).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryInfo.LastWriteTime">
            <summary>
            Gets the time when the directory entry was last written to (UTC).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryInfo">
            <summary>
            Contains the properties of a directory.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryInfo.#ctor(System.Uri,System.IO.FileAttributes,System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryInfo" /> class.
            </summary>
            <param name="uri">The URI of the file.</param>
            <param name="attributes">The attributes of file.</param>
            <param name="creationTime">The creation time of the file.</param>
            <param name="lastWriteTime">The last write time of the file.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.FileSystem.FileInfo">
            <summary>
            Contains the properties of a file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.FileInfo.#ctor(System.Uri,System.IO.FileAttributes,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.FileInfo" /> class.
            </summary>
            <param name="uri">The URI of the file.</param>
            <param name="attributes">The attributes of file.</param>
            <param name="length">The size of the file, in bytes.</param>
            <param name="creationTime">The creation time of the file.</param>
            <param name="lastWriteTime">The last write time of the file.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.FileInfo.#ctor(System.Uri,System.IO.FileAttributes,System.DateTime,System.DateTime,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.FileInfo" /> class.
            </summary>
            <param name="uri">The URI of the file.</param>
            <param name="attributes">The attributes of file.</param>
            <param name="creationTime">The creation time of the file.</param>
            <param name="lastWriteTime">The last write time of the file.</param>
            <param name="length">The size of the file, in bytes.</param>
            <remarks>
            This overload provides no additional functionality, but is required to make this type
            serializable via MessagePack, which requires the order of constructor parameters to
            match the Order properties of <see cref="T:System.Runtime.Serialization.DataMemberAttribute" />s.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.FileInfo.Length">
            <summary>
            Gets the size of the file, in bytes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.FileSystem.FileSystemAccessChangedEventArgs">
            <summary>
            Provides information about file system access change.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.FileSystemAccessChangedEventArgs.Empty">
            <summary>
            Gets empty event argument.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.FileSystem.FileSystemAccessLevel">
            <summary>
            Access level of a file or directory.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.FileSystem.FileSystemAccessLevel.Unknown">
            <summary>
            Access level is unknown. This may happen if the <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemAuthorizationService" /> is used in context where access can be
            restricted but the service cannot get more details, e.g. when it is used locally on Live Share guest or Codespaces client.
            Another case is when file or directory URI scheme is not known.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.FileSystem.FileSystemAccessLevel.LocalOrShared">
            <summary>
            File or directory can be accessed without restrictions because it is local,
            or it is shared in a Live Share or Codespaces session, and can be accessed by the session participant.
            This doesn't take into account ACLs or other ways to restrict access in local file system.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.FileSystem.FileSystemAccessLevel.Hidden">
            <summary>
            File or directory is hidden from callers via file attribute,
            or collaboration session is active and the file or directory is hidden via session configuration.
            The calling session participant can still access the file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.FileSystem.FileSystemAccessLevel.ExcludedFromSharing">
            <summary>
            Collaboration session is active, and the file or directory is explicitly excluded from the caller via session configuration.
            The caller session participant cannot access the file.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.FileSystem.FileSystemAccessLevel.NotShared">
            <summary>
            Collaboration session is active, and the file or directory is not shared with the caller in the session
            because it is outside of any shared directory.
            The caller session participant cannot access the file.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem">
            <summary>
            Allows access to local or remote file systems.
            Obtain this service using <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_9Services.FileSystem" />.
            The file systems that are available via this service are defined by the file system
            providers that are registered with it (<see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider" />).
            </summary>
            <remarks>
            The file system service refers to files by absolute <see cref="T:System.Uri" />.  Relative <see cref="T:System.Uri" />s
            are not supported.  <see cref="T:System.Uri" />s are divided into two types:
            <list type="table">
              <item>Local</item>
              <description>
              Local <see cref="T:System.Uri" />s refer to files on the machine where code is currently executing,
              using the "file" scheme.
              </description>
              <item>Remote</item>
              <description>
              Remote <see cref="T:System.Uri" />s refer to files by a globally-unique moniker, using a scheme defined
              by a remote file system provider.  The remote <see cref="T:System.Uri" /> for a given file is the same
              on a client machine or a server machine, and on a guest's machine or an owner's machine in
              a Live Share scenario.  In a classic, standalone scenario the local <see cref="T:System.Uri" /> and the
              remote <see cref="T:System.Uri" /> are identical.
              </description>
            </list>
            A local <see cref="T:System.Uri" /> can be converted to a remote <see cref="T:System.Uri" /> with
            <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem.ConvertLocalUriToRemoteUriAsync(System.Uri,System.String,System.Threading.CancellationToken)" />.
            A remote <see cref="T:System.Uri" /> can be converted to a local <see cref="T:System.Uri" /> with
            <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem.ConvertRemoteUriToLocalUriAsync(System.Uri,System.Threading.CancellationToken)" />.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem.GetSupportedSchemesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a list of the <see cref="T:System.Uri" /> schemes supported by the file system service.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A collection of schemes supported by the service (e.g. "file", "ftp", etc.).
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem.GetRootEntriesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the root entries of a provider's namespace.  For instance, the root entries
            for a provider for the local machine's file system might represent the physical
            drives on the local machine.
            </summary>
            <param name="scheme">The scheme for the provider.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A collection of <see cref="T:System.Uri" />s for the root entries of the provider's namespace.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem.GetMonikerForFileSystemProviderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Given the scheme for a file system provider, this method retrieves the provider's
            <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" />.
            <para>
            The service moniker can be used to create a <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the provider using
            <see cref="M:Microsoft.VisualStudio.VisualStudioServices.VS2019_6Services.CreateFileSystemProviderServiceDescriptor(Microsoft.ServiceHub.Framework.ServiceMoniker)" />.
            </para>
            </summary>
            <param name="scheme">The scheme for the provider.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The provider's service moniker.</returns>
            <remarks>
            Fetching a proxy for the provider's <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider" /> interface will
            return null if the provider does not support <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider" />.
            <para>Introduced in version <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_7Services.FileSystem" />.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="scheme" /> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            There is no file system provider for <paramref name="scheme" />.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem.GetMonikerForRemoteFileSystemProviderAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Given the scheme for a file system provider, this method retrieves the provider's
            <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" />.
            <para>
            The service moniker can be used to create a <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the provider using
            <see cref="M:Microsoft.VisualStudio.VisualStudioServices.VS2019_6Services.CreateFileSystemProviderServiceDescriptor(Microsoft.ServiceHub.Framework.ServiceMoniker)" />.
            </para>
            </summary>
            <param name="scheme">The scheme for the provider.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The provider's service moniker.</returns>
            <remarks>
            Fetching a proxy for the provider's <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider" /> interface will
            return null if the provider does not support <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider" />.
            <para>Introduced in version <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_7Services.FileSystem" />.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="scheme" /> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            There is no file system provider for <paramref name="scheme" />.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem.ConvertLocalUriToRemoteUriAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Converts a local <see cref="T:System.Uri" /> to a remote <see cref="T:System.Uri" /> using the provider for the scheme
            returned by <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem.GetDefaultRemoteUriSchemeAsync(System.Threading.CancellationToken)" />.
            </summary>
            <param name="localUri">The local <see cref="T:System.Uri" />.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The remote <see cref="T:System.Uri" />.</returns>
            <remarks>
            <paramref name="localUri" /> can be a <see cref="T:System.Uri" /> returned from one of the following methods:
            If the provider does not support <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider" />,
            <paramref name="localUri" /> is returned.
            <para>Introduced in version <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_8Services.FileSystem" />.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem.ConvertLocalUriToRemoteUriAsync(System.Uri,System.String,System.Threading.CancellationToken)">
            <summary>
            Converts a local <see cref="T:System.Uri" /> to a remote <see cref="T:System.Uri" /> using the provider for
            <paramref name="remoteScheme" />.
            </summary>
            <param name="localUri">The local <see cref="T:System.Uri" />.</param>
            <param name="remoteScheme">The desired scheme of the returned remote <see cref="T:System.Uri" />.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The remote <see cref="T:System.Uri" />.</returns>
            <remarks>
            If the provider does not support <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider" />,
            <paramref name="localUri" /> is returned.
            <para>Introduced in version <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_8Services.FileSystem" />.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem.ConvertLocalFileNameToRemoteUriAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Converts a local filename to a remote <see cref="T:System.Uri" /> using the provider for the scheme
            returned by <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem.GetDefaultRemoteUriSchemeAsync(System.Threading.CancellationToken)" />.
            </summary>
            <param name="fileName">The fully qualified name for the local file.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The remote <see cref="T:System.Uri" />.</returns>
            <remarks>
            If the provider does not support <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider" />, a <see cref="T:System.Uri" />
            created from <paramref name="fileName" /> is returned.
            <para>Introduced in version <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_8Services.FileSystem" />.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem.ConvertLocalFileNameToRemoteUriAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Converts a local filename to a remote <see cref="T:System.Uri" /> using the provider for
            <paramref name="remoteScheme" />.
            </summary>
            <param name="fileName">The fully qualified name for the local file.</param>
            <param name="remoteScheme">The desired scheme of the returned remote <see cref="T:System.Uri" />.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The remote <see cref="T:System.Uri" />.</returns>
            <remarks>
            If the provider does not support <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider" />, a <see cref="T:System.Uri" />
            created from <paramref name="fileName" /> is returned.
            <para>Introduced in version <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_8Services.FileSystem" />.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem.ConvertRemoteFileNameToRemoteUriAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Converts a remote filename to a remote <see cref="T:System.Uri" /> using the provider for the scheme
            returned by <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem.GetDefaultRemoteUriSchemeAsync(System.Threading.CancellationToken)" />.
            </summary>
            <param name="fileName">The fully qualified name for the remote file.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The remote <see cref="T:System.Uri" />.</returns>
            <remarks>
            Introduced in version <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_10Services.FileSystem" />.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem.ConvertRemoteFileNameToRemoteUriAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Converts a remote filename to a remote <see cref="T:System.Uri" /> using the provider for
            <paramref name="remoteScheme" />.
            </summary>
            <param name="fileName">The fully qualified name for the remote file.</param>
            <param name="remoteScheme">The desired scheme of the returned remote <see cref="T:System.Uri" />.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The remote <see cref="T:System.Uri" />.</returns>
            <remarks>
            Introduced in version <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_10Services.FileSystem" />.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem.ConvertRemoteUriToLocalUriAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Converts a remote <see cref="T:System.Uri" /> using the provider's <see cref="T:System.Uri" /> scheme to a local
            <see cref="T:System.Uri" />.
            </summary>
            <param name="remoteUri">The remote <see cref="T:System.Uri" />.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The local <see cref="T:System.Uri" />.</returns>
            <remarks>
            If the provider does not support <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider" />,
            <paramref name="remoteUri" /> is returned.
            <para>Introduced in version <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_8Services.FileSystem" />.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem.ConvertRemoteUriToRemoteFileNameAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Converts a remote <see cref="T:System.Uri" /> to a remote filename.
            </summary>
            <param name="remoteUri">The remote <see cref="T:System.Uri" />.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The remote filename.</returns>
            <remarks>
            Introduced in version <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_10Services.FileSystem" />.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem.DownloadFileAsync(System.Uri,System.IProgress{Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData},System.Threading.CancellationToken)">
            <summary>
            Downloads a remote file if it has not already been downloaded.
            </summary>
            <param name="remoteUri">The URI of the file to download.</param>
            <param name="progress">The interface through which progress is reported.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The URI of the local file.</returns>
            <remarks>
            If the file system provider for <paramref name="remoteUri" /> does not support
            <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider" /> or the remote provider isn't connected to its
            remote source, no file is downloaded and <paramref name="remoteUri" /> is returned.
            <para>Introduced in version <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_9Services.FileSystem" />.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem.GetDisplayInfoAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Gets display information for a <see cref="T:System.Uri" />.
            </summary>
            <param name="uri">The <see cref="T:System.Uri" /> whose display information is returned.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The display information for a <see cref="T:System.Uri" />.</returns>
            <remarks>Introduced in version <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_8Services.FileSystem" />.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem.GetDisplayInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets display information for a local file.
            </summary>
            <param name="fileName">The fully qualified file name.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The display information for <paramref name="fileName" />.</returns>
            <remarks>Introduced in version <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_8Services.FileSystem" />.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem.GetDefaultRemoteUriSchemeAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the default remote <see cref="T:System.Uri" /> scheme.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The default remote <see cref="T:System.Uri" /> scheme.</returns>
            <remarks>Introduced in version <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_8Services.FileSystem" />.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemAuthorizationService">
            <summary>
            Local service for checking file and folder access on Codespaces server or Live Share host.
            When this service is obtained with credentials associated with a Live Share guest, it will use session file access configuration.
            https://github.com/MicrosoftDocs/live-share/blob/master/docs/reference/security.md#controlling-file-access-and-visibility.
            When this service is obtained with credentials associated with the Codespaces client, it'll check if a file or directory
            is accessible to the client.
            Obtain this service using <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_7Services.FileSystemAuthorizationService" />.
            </summary>
            <remarks>
            Use <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemAuthorizationService" /> in a brokered service running on the server to test a local path
            before granting access to it to some possibly remote client.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemAuthorizationService.AccessChanged">
            <summary>
            Occurs when access may have changed due to session configuration change.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemAuthorizationService.GetLocalAccessAsync(System.Collections.Generic.IReadOnlyList{System.String},System.Threading.CancellationToken)">
            <summary>
            Get access level of local files and directories.
            </summary>
            <param name="localPaths">Array of local absolute paths to get the access level for.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A collection of access levels for the given list of local paths.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="localPaths" /> is null.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="localPaths" /> is empty or contains null or invalid paths.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemAuthorizationService.GetAccessAsync(System.Collections.Generic.IReadOnlyList{System.Uri},System.Threading.CancellationToken)">
            <summary>
            Get access level of files and directories.
            </summary>
            <param name="uris">Array of file or directory URIs to get the access level for.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A collection of access levels for the given list of file or directory URIs.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="uris" /> is null.</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="uris" /> is empty or contains null URIs.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider">
            <summary>
            Allows access to a particular file system, identified by <see cref="P:System.Uri.Scheme" />.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.DirectoryEntryChanged">
            <summary>
            Occurs when a file passed to <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.WatchFileAsync(System.Uri,System.Threading.CancellationToken)" /> or directory passed to
            <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.WatchDirectoryAsync(System.Uri,System.Boolean,System.Threading.CancellationToken)" /> changes.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.RootEntriesChanged">
            <summary>
            Occurs when the root elements of the provider's namespace change.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.GetRootEntriesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the root entries of the provider's namespace.  For instance, the root entries
            for a provider for the local machine's file system might represent the physical
            drives on the local machine.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A collection of <see cref="T:System.Uri" />s for the root entries of the provider's namespace.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.ReadFileAsync(System.Uri,System.IO.Pipelines.PipeWriter,System.Threading.CancellationToken)">
            <summary>
            Reads the contents of a file into a pipe.
            </summary>
            <param name="uri">The file to read.</param>
            <param name="writer">The writer for the pipe to which the file's contents are written.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A task representing the asynchronous read operation.
            </returns>
            <remarks>
            The complete contents of the file are not necessarily available in <paramref name="writer" />'s
            pipe when the returned task completes.  Rather, the complete contents of the file will be
            available in the pipe when <paramref name="writer" /> itself is completed.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uri" /> or <paramref name="writer" /> is null.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file does not exist.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.WriteFileAsync(System.Uri,System.IO.Pipelines.PipeReader,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Writes data to a file, replacing its entire contents if the file already exists.
            </summary>
            <param name="uri">The file to write.</param>
            <param name="reader">The reader for the pipe containing the data to be written to the file.</param>
            <param name="overwrite">Indicates whether an existing file can be overwritten.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task representing the asynchronous write operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uri" /> or <paramref name="reader" /> is null.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The parent of <paramref name="uri" /> doesn't exist.
            </exception>
            <exception cref="T:StreamJsonRpc.RemoteInvocationException">
            <paramref name="uri" /> exists and <paramref name="overwrite" /> is false.
            <see cref="P:StreamJsonRpc.RemoteInvocationException.ErrorCode" /> will be set to
            <see cref="F:Microsoft.VisualStudio.RpcContracts.ErrorCodes.FileAlreadyExists" />.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.WatchFileAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Starts watching a file for changes. A <see cref="E:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.DirectoryEntryChanged" /> event occurs
            when the file specified by <paramref name="uri" /> is created, deleted, or modified.
            </summary>
            <param name="uri">The file to be watched.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An object which can be passed to <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.UnwatchAsync(Microsoft.VisualStudio.RpcContracts.FileSystem.WatchResult,System.Threading.CancellationToken)" /> to stop watching the file.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.EnumerateFilesAsync(System.Uri,System.String,System.IO.SearchOption,System.Threading.CancellationToken)">
            <summary>
            Enumerates the files of a directory.
            </summary>
            <param name="uri">The URI of the directory to read.</param>
            <param name="searchPattern">
            The search string to match against the names of files.  This parameter
            can contain a combination of valid literal path and wildcard (* and ?) characters, but
            it doesn't support regular expressions.
            </param>
            <param name="searchOption">
            Specifies whether to search only the directory specified by <paramref name="uri" />,
            or directory specified by <paramref name="uri" /> and all of its subdirectories.
            </param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A collection of <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.FileInfo" /> instances.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri" /> is null.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The directory specified by <paramref name="uri" /> does not exist.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.EnumerateDirectoriesAsync(System.Uri,System.String,System.IO.SearchOption,System.Threading.CancellationToken)">
            <summary>
            Enumerates the child directories of a directory.
            </summary>
            <param name="uri">The URI of the directory to read.</param>
            <param name="searchPattern">
            The search string to match against the names of child directories.  This parameter
            can contain a combination of valid literal path and wildcard (* and ?) characters, but
            it doesn't support regular expressions.
            </param>
            <param name="searchOption">
            Specifies whether to search only the directory specified by <paramref name="uri" />,
            or directory specified by <paramref name="uri" /> and all of its subdirectories.
            </param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A collection of <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryInfo" /> instances.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri" /> is null.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The directory specified by <paramref name="uri" /> does not exist.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.EnumerateDirectoryEntriesAsync(System.Uri,System.String,System.IO.SearchOption,System.Threading.CancellationToken)">
            <summary>
            Enumerates the files and child directories of a directory.
            </summary>
            <param name="uri">The URI of the directory to read.</param>
            <param name="searchPattern">
            The search string to match against the names of files or child directories.  This parameter
            can contain a combination of valid literal path and wildcard (* and ?) characters, but
            it doesn't support regular expressions.
            </param>
            <param name="searchOption">
            Specifies whether to search only the directory specified by <paramref name="uri" />,
            or directory specified by <paramref name="uri" /> and all of its subdirectories.
            </param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A collection of <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.DirectoryEntryInfo" /> instances.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri" /> is null.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The directory specified by <paramref name="uri" /> does not exist.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.CreateDirectoryAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Creates a directory.
            </summary>
            <param name="uri">The directory to create.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task representing the asynchronous creation operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri" /> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="uri" /> contains invalid characters.
            </exception>
            <exception cref="T:StreamJsonRpc.RemoteInvocationException">
            <paramref name="uri" /> refers to a file that already exists.
            <see cref="P:StreamJsonRpc.RemoteInvocationException.ErrorCode" /> will be set to
            <see cref="F:Microsoft.VisualStudio.RpcContracts.ErrorCodes.FileAlreadyExists" />.
            </exception>
            <remarks>
            Any and all directories in <paramref name="uri" /> are created, unless they already
            exist or unless some part of <paramref name="uri" /> is invalid.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.WatchDirectoryAsync(System.Uri,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Starts watching a directory for changes. A <see cref="E:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.DirectoryEntryChanged" /> event
            occurs under the following circumstances:
            <para>
            1. A file in the directory specified by <paramref name="uri" /> is created, deleted,
            or modified.
            </para>
            <para>
            2. A child directory in the directory specified by <paramref name="uri" /> is created
            or deleted.
            </para>
            <para>
            3. If <paramref name="recursive" /> is true, a change described by #1 or #2 occurs in
            any child directory of the directory specified by <paramref name="uri" />.
            </para>
            </summary>
            <param name="uri">The directory to be watched.</param>
            <param name="recursive">Indicates whether subdirectories should be watched.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            An object which can be passed to <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.UnwatchAsync(Microsoft.VisualStudio.RpcContracts.FileSystem.WatchResult,System.Threading.CancellationToken)" /> to stop watching the directory.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri" /> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.CopyAsync(System.Uri,System.Uri,System.Boolean,System.IProgress{Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData},System.Threading.CancellationToken)">
            <summary>
            Copies a file or directory.
            </summary>
            <param name="sourceUri">The existing file or directory.</param>
            <param name="destinationUri">The new location.</param>
            <param name="overwrite">True to overwrite existing files; otherwise false.</param>
            <param name="progress">The interface through which progress is reported.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task representing the asynchronous copy operation.</returns>
            <remarks>
            If <paramref name="sourceUri" /> refers to a directory and <paramref name="overwrite" />
            is true, <paramref name="destinationUri" /> is removed before the copy is performed.
            If <paramref name="sourceUri" /> refers to a directory and <paramref name="overwrite" />
            is false, the source directory is merged into the existing contents of the destination
            directory.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="sourceUri" /> is null or <paramref name="destinationUri" /> is null.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="sourceUri" /> does not exist.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The parent of <paramref name="destinationUri" /> does not exist.
            </exception>
            <exception cref="T:StreamJsonRpc.RemoteInvocationException">
            <paramref name="sourceUri" /> refers to a file, <paramref name="destinationUri" />
            already exists and <paramref name="overwrite" /> is false.
            <see cref="P:StreamJsonRpc.RemoteInvocationException.ErrorCode" /> will be set to
            <see cref="F:Microsoft.VisualStudio.RpcContracts.ErrorCodes.FileAlreadyExists" />.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.MoveAsync(System.Uri,System.Uri,System.Boolean,System.IProgress{Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData},System.Threading.CancellationToken)">
            <summary>
            Moves or renames a file or directory.
            </summary>
            <param name="oldUri">The existing file or directory.</param>
            <param name="newUri">The new location.</param>
            <param name="overwrite">True to overwrite existing files; otherwise false.</param>
            <param name="progress">The interface through which progress is reported.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task representing the asynchronous rename operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="oldUri" /> is null or <paramref name="newUri" /> is null.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="oldUri" /> does not exist.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The parent of <paramref name="newUri" /> does not exist.
            </exception>
            <exception cref="T:StreamJsonRpc.RemoteInvocationException">
            <paramref name="newUri" /> already exists and <paramref name="overwrite" /> is false.
            <see cref="P:StreamJsonRpc.RemoteInvocationException.ErrorCode" /> will be set to
            <see cref="F:Microsoft.VisualStudio.RpcContracts.ErrorCodes.FileAlreadyExists" />.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.DeleteAsync(System.Uri,System.Boolean,System.IProgress{Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData},System.Threading.CancellationToken)">
            <summary>
            Deletes a file or directory.
            </summary>
            <param name="uri">The file or directory to delete.</param>
            <param name="recursive">
            True to remove directories, subdirectories, and files in <paramref name="uri" />;
            otherwise false.  If <paramref name="uri" /> refers to a file, <paramref name="recursive" />
            is ignored.
            </param>
            <param name="progress">The interface through which progress is reported.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task representing the asynchronous delete operation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri" /> is null.</exception>
            <exception cref="T:System.IO.IOException">
            <paramref name="uri" /> refers to a directory that is not empty and <paramref name="recursive" /> is false.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.UnwatchAsync(Microsoft.VisualStudio.RpcContracts.FileSystem.WatchResult,System.Threading.CancellationToken)">
            <summary>
            Stops watching a file or directory for changes.
            </summary>
            <param name="watchResult">
            The value returned by the call to <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.WatchFileAsync(System.Uri,System.Threading.CancellationToken)" /> or
            <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.WatchDirectoryAsync(System.Uri,System.Boolean,System.Threading.CancellationToken)" />.
            </param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="watchResult" /> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="watchResult" /> doesn't correspond to a watched file or directory.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.GetInfoAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Gets metadata about a file or directory.
            </summary>
            <param name="uri">The file or directory whose info is requested.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            Information about the file or directory, or null if the file or directory does not exist.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri" /> is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider">
            <summary>
            Allows downloading files from a remote file system to the local file system.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider.Connected">
            <summary>
            Occurs when the provider is connected to its remote source.  After this event
            is raised, the <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider.GetIsConnectedAsync(System.Threading.CancellationToken)" /> method will return true.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider.Disconnected">
            <summary>
            Occurs when the provider is disconnected from its remote source.  After this event
            is raised, the <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider.GetIsConnectedAsync(System.Threading.CancellationToken)" /> method will return false.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider.GetIsConnectedAsync(System.Threading.CancellationToken)">
            <summary>
            Indicates whether the file system provider is connected to its remote source.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <remarks>
            When a remote file system provider is disconnected, all of the <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider" />
            and <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider" /> methods should throw <see cref="T:System.InvalidOperationException" />.
            No <see cref="E:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.DirectoryEntryChanged" /> events will be raised for files or
            directories that were watched while the provider was connected.  If the provider is reconnected,
            the behavior with respect to <see cref="E:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.DirectoryEntryChanged" /> events is
            implementation defined.
            </remarks>
            <returns>
            Returns a value indicating whether the file system provider is connected to its remote source.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider.DownloadFileAsync(System.Uri,System.IProgress{Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData},System.Threading.CancellationToken)">
            <summary>
            Downloads a remote file if it has not already been downloaded.
            </summary>
            <param name="uri">The URI of the file to download.</param>
            <param name="progress">The interface through which progress is reported.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The URI of the local file.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider.ConvertLocalUriToRemoteUriAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Converts a local URI to a remote URI using the provider's URI scheme.
            </summary>
            <param name="localUri">The local URI.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The remote URI.</returns>
            <remarks>
            <paramref name="localUri" /> can be a <see cref="T:System.Uri" /> returned from
            <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider.DownloadFileAsync(System.Uri,System.IProgress{Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData},System.Threading.CancellationToken)" /> or from <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider.ConvertRemoteUriToLocalUriAsync(System.Uri,System.Threading.CancellationToken)" />.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider.ConvertRemoteUriToLocalUriAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Converts a remote URI using the provider's URI scheme to a local URI.
            </summary>
            <param name="remoteUri">The remote URI.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The local URI.</returns>
            <remarks>
            The local file may not exist if it has not been downloaded.  Use the
            <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider.DownloadFileAsync(System.Uri,System.IProgress{Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData},System.Threading.CancellationToken)" /> method to ensure the file has been
            downloaded.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IUriDisplayInfoProvider">
            <summary>
            An interface to provide display information for a <see cref="T:System.Uri" />.
            This is an optional interface that can be implemented by a file system provider.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IUriDisplayInfoProvider.GetDisplayInfoAsync(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Gets display information for a <see cref="T:System.Uri" />.
            </summary>
            <param name="uri">The <see cref="T:System.Uri" /> whose display information is returned.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The display information for a <see cref="T:System.Uri" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData">
            <summary>
            A struct that represents the progress of a file system operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData.#ctor(System.Int32,System.Int32,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData" /> struct.
            </summary>
            <param name="totalEntryCount">The total number of entries the operation has found thus far.</param>
            <param name="completedEntryCount">The completed number of entries in the operation.</param>
            <param name="totalByteCount">The total number of bytes the operation has found thus far.</param>
            <param name="completedByteCount">The completed number of bytes in the operation.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData.TotalEntryCount">
            <summary>
            Gets the total number of entries the operation has found thus far.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData.CompletedEntryCount">
            <summary>
            Gets the completed number of entries in the operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData.TotalByteCount">
            <summary>
            Gets the total number of bytes in operation has found thus far.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData.CompletedByteCount">
            <summary>
            Gets the completed number of bytes in the operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData.op_Equality(Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData,Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData)">
            <summary>
            Equals operator for <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData" />.
            </summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare.</param>
            <returns>True if equal, false if unequal.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData.op_Inequality(Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData,Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData)">
            <summary>
            Not-equals operator for <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData" />.
            </summary>
            <param name="left">The first instance to compare.</param>
            <param name="right">The second instance to compare.</param>
            <returns>True if unequal, false if equal.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData.Equals(System.Object)">
            <summary>
            Compares an <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData" /> instance with another object.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if equal, false if unequal.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData.Equals(Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData)">
            <summary>
            Compares an <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData" /> instance with another
            <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData" /> instance.
            </summary>
            <param name="other">The instance to compare to.</param>
            <returns>True if equal, false if unequal.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData.GetHashCode">
            <summary>
            Computes the hash code for an <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.OperationProgressData" /> instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.FileSystem.RootEntriesChangedEventArgs">
            <summary>
            The arguments that are sent with the <see cref="E:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.RootEntriesChanged" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.RootEntriesChangedEventArgs.#ctor(System.String,System.Collections.Generic.IReadOnlyList{System.Uri})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.RootEntriesChangedEventArgs" /> class.
            </summary>
            <param name="scheme">
            The scheme of the file system provider for which the root elements
            of the provider's namespace have changed.
            </param>
            <param name="rootEntries">The root entries of the provider's namespace.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.RootEntriesChangedEventArgs.Scheme">
            <summary>
            Gets the scheme of the file system provider for which the root elements
            of the provider's namespace have changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.RootEntriesChangedEventArgs.RootEntries">
            <summary>
            Gets the root entries of the provider's namespace.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.FileSystem.UriDisplayInfo">
            <summary>
            A class containing the display properties for a <see cref="T:System.Uri" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.UriDisplayInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.UriDisplayInfo" /> class.
            </summary>
            <param name="name">The display name of the <see cref="T:System.Uri" />.</param>
            <param name="fullName">The full display name of the <see cref="T:System.Uri" />.</param>
            <param name="groupName">The group name of the <see cref="T:System.Uri" />.</param>
            <param name="fullGroupName">The full group name of the <see cref="T:System.Uri" />.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.UriDisplayInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.UriDisplayInfo" /> class.
            </summary>
            <param name="name">The display name of the <see cref="T:System.Uri" />.</param>
            <param name="fullName">The full display name of the <see cref="T:System.Uri" />.</param>
            <param name="groupName">The group name of the <see cref="T:System.Uri" />.</param>
            <param name="fullGroupName">The full group name of the <see cref="T:System.Uri" />.</param>
            <param name="serverFullName">
            The full display name of the <see cref="T:System.Uri" /> as it exists on the server.
            If the <see cref="T:System.Uri" /> doesn't exist on the server, this value is <c>null</c>.
            </param>
            <param name="serverFullGroupName">
            The full group name of the <see cref="T:System.Uri" /> as it exists on the server.
            If the <see cref="T:System.Uri" /> doesn't exist on the server, this value is <c>null</c>.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.UriDisplayInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.UriDisplayInfo" /> class.
            </summary>
            <param name="name">The display name of the <see cref="T:System.Uri" />.</param>
            <param name="fullName">The full display name of the <see cref="T:System.Uri" />.</param>
            <param name="groupName">The group name of the <see cref="T:System.Uri" />.</param>
            <param name="fullGroupName">The full group name of the <see cref="T:System.Uri" />.</param>
            <param name="serverFullName">
            The full display name of the <see cref="T:System.Uri" /> as it exists on the server.
            If the <see cref="T:System.Uri" /> doesn't exist on the server, this value is <c>null</c>.
            </param>
            <param name="serverFullGroupName">
            The full group name of the <see cref="T:System.Uri" /> as it exists on the server.
            If the <see cref="T:System.Uri" /> doesn't exist on the server, this value is <c>null</c>.
            </param>
            <param name="relativeName">
            The name of the <see cref="T:System.Uri" /> relative to the workspace.  If the
            <see cref="T:System.Uri" /> specifies a file that is not under the workspace, this value is
            should be the same as <paramref name="fullName" />.
            </param>
            <param name="relativeGroupName">
            The group name of the <see cref="T:System.Uri" /> relative to the workspace.  If the
            <see cref="T:System.Uri" /> specifies a file that is not under the workspace, this value is
            should be the same as <paramref name="fullGroupName" />.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.UriDisplayInfo.Name">
            <summary>
            Gets the display name of the <see cref="T:System.Uri" />.  For a "file:/" <see cref="T:System.Uri" />
            this would be the filename with extension.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.UriDisplayInfo.FullName">
            <summary>
            Gets the full display name of the <see cref="T:System.Uri" />.  For a "file:/" <see cref="T:System.Uri" />
            this would be the fully-qualified filename.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.UriDisplayInfo.GroupName">
            <summary>
            Gets the group name of the <see cref="T:System.Uri" />.  For a "file:/" <see cref="T:System.Uri" />
            this would be the name of the parent directory.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.UriDisplayInfo.FullGroupName">
            <summary>
            Gets the full group name of the <see cref="T:System.Uri" />.  For a "file:/" <see cref="T:System.Uri" />
            this would be the fully-qualified parent directory.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.UriDisplayInfo.ServerFullName">
            <summary>
            Gets the full display name of the <see cref="T:System.Uri" /> as it exists on the server.
            If the <see cref="T:System.Uri" /> doesn't exist on the server, this value is <c>null</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.UriDisplayInfo.ServerFullGroupName">
            <summary>
            Gets the full group name of the <see cref="T:System.Uri" /> as it exists on the server.
            If the <see cref="T:System.Uri" /> doesn't exist on the server, this value is <c>null</c>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.UriDisplayInfo.RelativeName">
            <summary>
            Gets the name of the <see cref="T:System.Uri" /> relative to the workspace.  If the
            <see cref="T:System.Uri" /> specifies a file that is not under the workspace, this value is
            the same as <see cref="P:Microsoft.VisualStudio.RpcContracts.FileSystem.UriDisplayInfo.FullName" />.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.UriDisplayInfo.RelativeGroupName">
            <summary>
            Gets the group name of the <see cref="T:System.Uri" /> relative to the workspace.  If the
            <see cref="T:System.Uri" /> specifies a file that is not under the workspace, this value is
            the same as <see cref="P:Microsoft.VisualStudio.RpcContracts.FileSystem.UriDisplayInfo.FullGroupName" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.FileSystem.WatchResult">
            <summary>
            The result of a call to <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.WatchFileAsync(System.Uri,System.Threading.CancellationToken)" /> or
            <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider.WatchDirectoryAsync(System.Uri,System.Boolean,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.FileSystem.WatchResult.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.WatchResult" /> class.
            </summary>
            <param name="scheme">The scheme of the <see cref="T:System.Uri" /> being watched.</param>
            <param name="cookie">The cookie representing the subscription.</param>
            <param name="isDirectory">
            Indicates whether the watched <see cref="T:System.Uri" /> is a directory.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.WatchResult.Scheme">
            <summary>
            Gets the scheme of the file system provider returning the watch result.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.WatchResult.Cookie">
            <summary>
            Gets the cookie identifying file or directory being watched.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.FileSystem.WatchResult.IsDirectory">
            <summary>
            Gets a value indicating whether indicates whether the watch result represents a directory.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.IStringResourceDictionary">
            <summary>
            Describes a contract for looking up string resources.
            </summary>
            <remarks>
            This is primarily designed to be used as a client callback contract so the server can get localized messages from the client.
            A brokered service that provides localized resources to the client can normally do so without taking a <see cref="T:System.Globalization.CultureInfo" /> parameter
            since it is activated with <see cref="P:Microsoft.ServiceHub.Framework.ServiceActivationOptions.ClientCulture" />.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.IStringResourceDictionary.GetStringResourceAsync(System.Globalization.CultureInfo,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a localized string.
            </summary>
            <param name="culture">The culture for which a string is required.</param>
            <param name="resourceId">The name of the resource to acquire.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The localized string, which may be from the default culture rather than the desired culture if no translation of the identified resource is available in the desired culture.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when <paramref name="resourceId" /> does not match any known string.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Logging.ITraceHubClientCallback">
            <summary>
            Interface used to request logging changes from the tracing hub to the client using the tracing hub.
            Implement this interface to support sending live log streams.
            </summary>
            <remarks>
            Use the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> from
            <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_10Services.TraceHubRegistrationService" /> to access the service.
            It is expected that any library providing a logging utility, like Microsoft.VisualStudio.LogHub
            will implement this interface directly and provide an abstraction to the client. Extension developers
            should use the logging utility library provided by Visual Studio when possible and do not need to
            implement this interface directly.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.ITraceHubClientCallback.BeginTraceStreamAsync(Microsoft.VisualStudio.RpcContracts.Logging.LogId,System.IO.Pipelines.PipeWriter,Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings,System.Threading.CancellationToken)">
            <summary>
            Gets a live stream of events in the specified log. There is explicitly no defined log format that should
            be written to <see cref="T:System.IO.Pipelines.PipeWriter" />. It is suggested to use the format implemented by
            System.Diagnostics.XmlWriterTraceListener and to emit svclog format whenever possible.
            </summary>
            <param name="logId">Fully-qualified id of the log stream.</param>
            <param name="pipeWriter">
            The <see cref="T:System.IO.Pipelines.PipeWriter" /> to write the log stream into, this should be the same byte-format of the log
            being stored locally with the running component. When the returned <see cref="T:System.IDisposable" /> is disposed of
            this <see cref="T:System.IO.Pipelines.PipeWriter" /> will be completed.
            </param>
            <param name="verbositySettings">The desired logging level settings for the return stream.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <remarks>
            When a caller of this stream no longer wishes to receive more data from the log stream being provided
            through <paramref name="pipeWriter" />, the caller should call <see cref="M:System.IDisposable.Dispose" />
            on the returned value.
            </remarks>
            <returns>
            This is an awaitable task for the stream to begin, and an <see cref="T:System.IDisposable" />, that, when
            <see cref="M:System.IDisposable.Dispose" /> is called, will cause the stream to stop.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.ITraceHubClientCallback.FlushAsync(Microsoft.VisualStudio.RpcContracts.Logging.LogId,System.Threading.CancellationToken)">
            <summary>
            Requests that the client perform a flush to disk.
            </summary>
            <param name="logId">Fully-qualified id of the log stream.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task that completes when the flush is finished.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Logging.ITraceHubRegistrationService">
            <summary>
            Interface used to describe contract between trace components in remote services and the tracing hub.
            Used to configure tracing providers and proffer log streams and to offer configuration log levels and log
            locations to tracing components.
            </summary>
            <remarks>
            Use the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> from
            <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_10Services.TraceHubRegistrationService" /> to access the service.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.ITraceHubRegistrationService.SubscribeToLogVerbosityAsync(System.IObserver{Microsoft.VisualStudio.RpcContracts.Logging.LogVerbosityState},Microsoft.VisualStudio.RpcContracts.Logging.LogId,System.Threading.CancellationToken)">
            <summary>
            Attaches an observer for updates to when logging verbosity state changes.
            </summary>
            <param name="observer">An observer of logging verbosity state changes.</param>
            <param name="logId">
            The <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LogId" /> of the log you wish to subscribe receive verbosity change events for.
            </param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>
            A value that may be disposed of to unregister the <paramref name="observer" /> from future notifications.
            </returns>
            <remarks>
            <para>The initial state of open code containers will be sent immediately to the observer.</para>
            <para>This method was added in Visual Studio 16.9.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.ITraceHubRegistrationService.RegisterTraceLogAsync(Microsoft.VisualStudio.RpcContracts.Logging.LogId,Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions,System.Threading.CancellationToken)">
            <summary>
            Registers a new log stream with the tracing hub and exposes it to requesting clients.
            </summary>
            <param name="logId">
            Id of the log stream within the service, this should be globally unique. The <see cref="P:Microsoft.VisualStudio.RpcContracts.Logging.LogId.LogName" />
            should be a fully-qualified hierarchical name starting with your team's namespace.
            This should be a string like "Microsoft.VisualStudio.Debugger.Concord.DispatcherDiagnosticsLog" where the
            last segment is a friendly name of the log. It is important to use a fully-qualified hierarchical name even
            when this log stream is also classified by a <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" />. This must be unique across
            all log streams from all services and components; when a duplicate request is received the method will
            return an error code in <see cref="P:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration.Status" />.
            </param>
            <param name="options">Options describing how the tracing hub can treat this log.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration" /> with the <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LogId" /> of the newly registered log, a status code in
            <see cref="P:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration.Status" /> indicating if the log was already registered or this is a new
            registration or an error, a <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings" /> from
            <see cref="P:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration.VerbositySettings" /> indicating the current logging
            verbosity of the log stream, and a <see cref="T:System.String" /> representing the directory and file prefix where
            the log should be written to.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions">
            <summary>
            Logging options for a given log stream. This class is immutable.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions.#ctor(Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings,Microsoft.VisualStudio.RpcContracts.Logging.PrivacyFlags,System.Collections.Generic.IReadOnlyCollection{System.String},Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings,Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions" /> class. This constructor Will specify all
            class parameters.
            </summary>
            <param name="requestedLoggingLevel">
            The settings that the client wishes to begin logging with. Best effort is used to respect this setting.
            </param>
            <param name="privacySetting">
            Set of flags defining what the new log stream may contain. See documentation on
            <seealso cref="T:Microsoft.VisualStudio.RpcContracts.Logging.PrivacyFlags" /> for details.
            </param>
            <param name="systemTags">
            A collection of <see cref="T:System.String" />s representing tags that represent the systems where this trace log stream
            may contain useful information when debugging the system given in the tag. May pass null when no tags
            need to be specified.
            </param>
            <param name="maxSupportedLoggingLevel">
            The maximum logging verbosity that should ever be applied to this logging stream. LogHub will never request
            a verbosity higher than this level. This will default to a <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings" /> where
            <see cref="P:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings.LoggingVerbosity" /> is <see cref="F:System.Diagnostics.SourceLevels.All" />.
            The default should be used for most cases.
            </param>
            <param name="minSupportedLoggingLevel">
            The minimum logging verbosity that should ever be applied to this logging stream. LogHub will never request
            a verbosity lower than this level. This will default to a <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings" /> where
            <see cref="P:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings.LoggingVerbosity" /> is <see cref="F:System.Diagnostics.SourceLevels.Off" />.
            The default should be used for most cases.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions.#ctor(Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings,Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings,Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings,Microsoft.VisualStudio.RpcContracts.Logging.PrivacyFlags,System.Collections.Generic.IReadOnlyCollection{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions" /> class.
            This constructor must match the property layout order for MessagePack.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions.RequestedLoggingLevel">
            <summary>
            Gets the requested <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings" />. This defines the logging level that the client
            wants to start with. May be null, which will request the current default from LogHub service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions.MaxSupportedLoggingLevel">
            <summary>
            Gets the requested <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings" />. This defines the most verbose logging level
            that should ever be set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions.MinSupportedLoggingLevel">
            <summary>
            Gets the requested <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings" />. This defines the least verbose logging level
            that should ever be set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions.PrivacySetting">
            <summary>
            Gets restrictions related to how a log stream may be distributed or automatically collected.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions.SystemTags">
            <summary>
            Gets set of system tags that tag this log stream with the systems that could use this log.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings">
            <summary>
            Represents the settings for live configuration of a log stream.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings.#ctor(System.Diagnostics.SourceLevels)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings" /> class with all fields specified.
            </summary>
            <param name="loggingVerbosity">
            The set logging verbosity level that should be recorded. Level is inclusive of all higher (more severe)
            logging levels. View documentation on <seealso cref="T:System.Diagnostics.SourceLevels" /> for more information.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings.LoggingVerbosity">
            <summary>
            Gets the desired logging verbosity level that should be recorded. Level is inclusive of all higher
            (more severe) logging levels. View documentation on <seealso cref="T:System.Diagnostics.SourceLevels" /> for more information.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings.DebuggerDisplay">
            <summary>
            Gets a <see cref="T:System.String" /> used to display this object in the debugger UI.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings.op_Equality(Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings,Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings)">
            <summary>
            Operator override for ==.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True if instances are equal to each other.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings.op_Inequality(Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings,Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings)">
            <summary>
            Operator override for !=.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>True if instances are not equal to each other.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings.op_GreaterThanOrEqual(Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings,Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings)">
            <summary>
            Tests if <paramref name="left" /> &gt;= <paramref name="right" />.
            Specifically, if all settings in the <paramref name="left" /> operand are equal to or greater in logging
            verbosity than the <paramref name="right" /> operand.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>
            True if each property in the <paramref name="left" /> operand is at least as permissive as the
            corresponding property in the <paramref name="right" /> operand.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings.op_LessThanOrEqual(Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings,Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings)">
            <summary>
            Tests if <paramref name="left" /> &lt;= <paramref name="right" />.
            Specifically, if all settings in the <paramref name="right" /> operand are equal to or greater in logging
            verbosity than the <paramref name="left" /> operand.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>
            True if each property in the <paramref name="right" /> operand is at least as permissive as the
            corresponding property in the <paramref name="left" /> operand.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings.op_LessThan(Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings,Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings)">
            <summary>
            Tests if <paramref name="left" /> &lt; <paramref name="right" />.
            Specifically, if some settings in the <paramref name="right" /> operand are greater in logging
            verbosity than the <paramref name="left" /> operand.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>
            True if each property in the <paramref name="right" /> operand is at least as permissive as the
            corresponding property in the <paramref name="left" /> operand and at least one property is more
            permissive in the <paramref name="right" /> operand than the <paramref name="left" /> operand.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings.op_GreaterThan(Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings,Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings)">
            <summary>
            Tests if <paramref name="left" /> &gt; <paramref name="right" />.
            Specifically, if some settings in the <paramref name="left" /> operand are greater in logging
            verbosity than the <paramref name="right" /> operand.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns>
            True if each property in the <paramref name="left" /> operand is at least as permissive as the
            corresponding property in the <paramref name="right" /> operand and at least one property is more
            permissive in the <paramref name="left" /> operand than the <paramref name="right" /> operand.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings.Equals(Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings.CompareTo(Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings)">
            <inheritdoc />
            <remarks>
            In order to make a valid comparison, exactly one of <paramref name="other" /> and "this" must be
            a subset of the other. In other words, only one of these 2 objects may contain
            extra unique logging setting(s). For example, if "this" enables <see cref="F:System.Diagnostics.SourceLevels.ActivityTracing" />
            and nothing else and <paramref name="other" /> enables <see cref="F:System.Diagnostics.SourceLevels.Warning" /> and nothing
            else, an <see cref="T:System.InvalidOperationException" /> will be thrown because a strict ordering is not possible.
            If "this" enables <see cref="F:System.Diagnostics.SourceLevels.ActivityTracing" /> and nothing else and <paramref name="other" />
            enables <see cref="F:System.Diagnostics.SourceLevels.Warning" /> | <see cref="F:System.Diagnostics.SourceLevels.ActivityTracing" /> then a negative
            <see cref="T:System.Int32" /> will be returned because "this" is a subset of <paramref name="other" />. If "this" and
            <param name="other" /> are equal, 0 will be returned.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Logging.LogId">
            <summary>
            Class representing the fully-qualified id of a given log stream and all information that can be used to
            identify the log.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LogId.#ctor(System.String,Microsoft.ServiceHub.Framework.ServiceMoniker)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LogId" /> struct.
            </summary>
            <exception cref="T:System.ArgumentException">
            Throws <see cref="T:System.ArgumentException" /> when <paramref name="logName" /> empty or null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws <see cref="T:System.ArgumentOutOfRangeException" /> when <paramref name="logName" /> is not a fully-qualified
            log name that contains at least 1 '.' delineating a namespace-like prefix or contains characters other than
            A-Z, a-z, 0-9 and _.
            </exception>
            <param name="serviceId">
            The optional <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" /> representing the service that generates the log stream identified
            by this <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LogId" />. This should always be specified if the source is a RPC service and be null
            when the source is not an RPC service.
            </param>
            <param name="logName">
            The fully-qualified name of the log stream. This should be globally unique. The <see cref="T:System.String" />
            should be similar to a fully-qualified C# class name, like "Microsoft.VisualStudio.Debugger".
            Specifically, at least one "." must appear in the name, the name may not begin, nor end with a "." and
            no more than one "." may appear in a row (no ".." in the name). Allowable characters for the name are:
            A-Z, a-z, 0-9 and _. The "." is also an allowable character with the restrictions above.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Logging.LogId.LogName">
            <summary>
            Gets the fully-qualified name of the given log stream.
            </summary>
            <remarks>
            The fully-qualified name of the log stream. This is globally unique. The <see cref="T:System.String" />
            should be similar to a fully-qualified C# class name, like "Microsoft.VisualStudio.Debugger".
            Specifically, at least one "." must appear in the name, the name may not begin, nor end with a "." and
            no more than one "." may appear in a row (no ".." in the name). Allowable characters for the name are:
            A-Z, a-z, 0-9 and _. The "." is also an allowable character with the restrictions above.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Logging.LogId.ServiceId">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceMoniker" /> of the service that is emitting this log stream.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Logging.LogId.DebuggerDisplay">
            <summary>
            Gets a <see cref="T:System.String" /> used to display this object in the debugger UI.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LogId.op_Equality(Microsoft.VisualStudio.RpcContracts.Logging.LogId,Microsoft.VisualStudio.RpcContracts.Logging.LogId)">
            <summary>
            Equality comparison operator.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>true</c> if the left and right operand are equivalent.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LogId.op_Inequality(Microsoft.VisualStudio.RpcContracts.Logging.LogId,Microsoft.VisualStudio.RpcContracts.Logging.LogId)">
            <summary>
            Inequality comparison operator.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>true</c> if the left and right operand are different.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LogId.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LogId.Equals(Microsoft.VisualStudio.RpcContracts.Logging.LogId)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LogId.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LogId.ToString">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LogId.IsValidName(System.String)">
            <summary>
            Checks if the given log name is valid given <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LogId" />'s <see cref="P:Microsoft.VisualStudio.RpcContracts.Logging.LogId.LogName" />
            namespace requirements. This method will verify that the string:
            <para>
            1. Contains at least one '.' defining at least one root namespace and a name. "Root-level" log names
            aren't allowed. "MyLogName" is invalid, "Microsoft.MyLogName" is valid.
            </para>
            <para>
            2. Does not contain any empty namespace.
            ".Microsoft.Log", "Microsoft..Log" and "Microsoft.Log." are invalid, "Microsoft.Log" is valid.
            </para>
            <para>3. Does not contain any characters other than A-Z, a-z, 0-9, '_' or '.'.</para>
            </summary>
            <param name="logName">The string to validate.</param>
            <returns>True if the name is valid, false otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration">
            <summary>
            Represents single entry in a log with associated metadata.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration.#ctor(Microsoft.VisualStudio.RpcContracts.Logging.RegistrationStatuses,Microsoft.VisualStudio.RpcContracts.Logging.LogId,Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration" /> class. This overload is for a successful result.
            </summary>
            <param name="status">
            The result of the call to
            <see cref="M:Microsoft.VisualStudio.RpcContracts.Logging.ITraceHubRegistrationService.RegisterTraceLogAsync(Microsoft.VisualStudio.RpcContracts.Logging.LogId,Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions,System.Threading.CancellationToken)" />,
            indicates if a new trace log stream was registered or an existing registration already exists. This
            parameter must have <see cref="F:Microsoft.VisualStudio.RpcContracts.Logging.RegistrationStatuses.Success" /> set for this overload.
            </param>
            <param name="id">The <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LogId" /> representing the log that has been registered.</param>
            <param name="verbositySettings">
            The requested logging verbosity settings of the registered trace log stream.
            </param>
            <param name="logFilePathPrefix">
            The string representing the directory and filename prefix for the log. It is assumed that the client
            library using this API will prepend a file extension with the '.' to write to disk.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration.#ctor(Microsoft.VisualStudio.RpcContracts.Logging.LogId)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration" /> class. This overload is for a failed result.
            <see cref="P:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration.Status" /> will be set to <see cref="F:Microsoft.VisualStudio.RpcContracts.Logging.RegistrationStatuses.Failure" />.
            </summary>
            <param name="id">The <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LogId" /> representing the log that has been registered.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration.#ctor(Microsoft.VisualStudio.RpcContracts.Logging.LogId,Microsoft.VisualStudio.RpcContracts.Logging.RegistrationStatuses,System.String,Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration" /> class.
            This constructor must match the property layout order for MessagePack.
            This constructor is for use only by deserializers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration.Id">
            <summary>
            Gets the <see cef="LogId" /> representing the log that has been registered.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration.Status">
            <summary>
            Gets the status of the call to
            <see cref="M:Microsoft.VisualStudio.RpcContracts.Logging.ITraceHubRegistrationService.RegisterTraceLogAsync(Microsoft.VisualStudio.RpcContracts.Logging.LogId,Microsoft.VisualStudio.RpcContracts.Logging.LoggerOptions,System.Threading.CancellationToken)" />,
            indicates if a new trace log stream was registered or an existing registration already exists.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration.LogFilePathPrefix">
            <summary>
            Gets a string representing the directory and file prefix that should be logged.
            </summary>
            <remarks>
            This will return a string similar to
            "C:\Users\MyUsername\AppData\Local\Temp\VisualStuidoLogs\VS1294.Microsoft.VisualStudio.DiagnosticsHub.Warehouse".
            It is intended that the consumer will append their desired file extensions and write to those files.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration.VerbositySettings">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings" /> representing the requested logging verbosity settings of the
            registered trace log stream.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration.IsSuccess(System.Boolean)">
            <summary>
            Method used to determine if this <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration" />'s <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.RegistrationStatuses" />
            <see cref="P:Microsoft.VisualStudio.RpcContracts.Logging.LogRegistration.Status" /> represents a successful result.
            </summary>
            <param name="requireUniqueRegistration">
            If duplicate registration calls were made with the same <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LogId" />,
            <see cref="F:Microsoft.VisualStudio.RpcContracts.Logging.RegistrationStatuses.NewRegistration" /> will not be set in the returned code. This may indicate
            an error depending on your scenario. If you expect your log to only ever make a single registration call,
            then set <paramref name="requireUniqueRegistration" /> to <see langword="true" />. If you expect to make
            multiple registration calls with the same <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LogId" /> in order to write to the same log, then set
            <paramref name="requireUniqueRegistration" /> to <see langword="false" />.
            </param>
            <returns>A <see cref="T:System.Boolean" /> indicating that the status code means a success.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Logging.LogVerbosityState">
            <summary>
            Event args for changing the logging verbosity in a given trace log stream.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Logging.LogVerbosityState.#ctor(Microsoft.VisualStudio.RpcContracts.Logging.LogId,Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LogVerbosityState" /> class.
            </summary>
            <param name="id">The id of the trace log stream that should change verbosity level.</param>
            <param name="verbositySettings">
            The newly requested logging verbosity for the trace log stream.
            This is a <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings" /> object.
            </param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Logging.LogVerbosityState.Id">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LogId" /> of the trace log stream that has a request to set the
            <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings" /> that determine the new logging verbosity.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Logging.LogVerbosityState.VerbositySettings">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.LoggingLevelSettings" /> that determine the new logging verbosity. Each level should
            automatically include all higher-severity messages. For Example: if the SourceLevels.Warning flag
            is set, logging of all Critical, Error, and Warning level events should be done.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Logging.PrivacyFlags">
            <summary>
            Set of flags describing the potential presence of information of a given privacy classification.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Logging.PrivacyFlags.None">
            <summary>
            Blank flag meaning that this log will NEVER have any private information that can be described
            by the flags below.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Logging.PrivacyFlags.MayContainPersonallyIdentifibleInformation">
            <summary>
            The log may contain information that may be able to be used to identify the individual or
            organization that is using the product. This flag is a warning to the Log system indicating
            that this log must be treated as if it contains Personally Identifiable Information (PII).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Logging.PrivacyFlags.MayContainPrivateInformation">
            <summary>
            The log may contain private information. This is for information like a user's error messages.
            This information is not necessarily identifiable however may contain private information such as
            a customer's credit card number showing up in an exception message. This flag is a warning to
            the Log system indicating that this log must be treated as if it contains Private Information.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Logging.RegistrationStatuses">
            <summary>
            <see langword="enum" /> representing all the possible results of calls to register a new trace log stream.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Logging.RegistrationStatuses.Failure">
            <summary>
            This is the default value with no flags set, this indicates a failure.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Logging.RegistrationStatuses.Success">
            <summary>
            When set indicates that the trace log stream was registered successfully.
            When not set this indicates a failure. If a failure, a trace log stream may already exist
            with the given <see cref="P:Microsoft.VisualStudio.RpcContracts.Logging.LogId.LogName" /> and a different <see cref="P:Microsoft.VisualStudio.RpcContracts.Logging.LogId.ServiceId" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Logging.RegistrationStatuses.NewRegistration">
            <summary>
            When set this indicates that this trace log stream was not previously registered.
            When not set this indicates that this trace log stream has already been registered.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.OpenDocument.DocumentWindowCaptionKind">
            <summary>
            Defines kinds of document window captions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.OpenDocument.DocumentWindowCaptionKind.DocumentName">
            <summary>
            Caption consists of the document name (full path minus project path).
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.OpenDocument.DocumentWindowCaptionKind.ProjectItemHierarchyName">
            <summary>
            Caption consists of the the document's project item hierarchy name.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.OpenDocument.DocumentWindowCaptionKind.ProjectName">
            <summary>
            Caption consists of the project name.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.OpenDocument.DocumentWindowCaptionKind.Custom">
            <summary>
            Custom caption.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.OpenDocument.IOpenDocumentService">
            <summary>
            Allows opening documents on the client.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.OpenDocument.IOpenDocumentService.OpenDocumentAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Opens document at the given local file <paramref name="path" /> with the default editor for that document.
            If the <paramref name="path" /> represents local file path of a remote file and can be converted to
            remote URI via <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider.ConvertLocalUriToRemoteUriAsync(System.Uri,System.Threading.CancellationToken)" />,
            the remote file will be downloaded and opened.
            </summary>
            <param name="path">The local file path to the document to open. If the path represents local file path of a remote
            file and can be converted to remote URI via <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider.ConvertLocalUriToRemoteUriAsync(System.Uri,System.Threading.CancellationToken)" />,
            the remote file will be downloaded and opened.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task representing the opening of a document editor.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.OpenDocument.IOpenDocumentService.OpenDocumentWithEditorSelectionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Opens document at the given local file <paramref name="path" /> with an editor selected by the user.
            If the <paramref name="path" /> represents local file path of a remote file and can be converted to
            remote URI via <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider.ConvertLocalUriToRemoteUriAsync(System.Uri,System.Threading.CancellationToken)" />,
            the remote file will be downloaded and opened.
            </summary>
            <param name="path">The local file path to the document to open. If the path represents local file path of a remote
            file and can be converted to remote URI via <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider.ConvertLocalUriToRemoteUriAsync(System.Uri,System.Threading.CancellationToken)" />,
            the remote file will be downloaded and opened.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task representing the user selection and opening of a document editor.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.OpenDocument.IOpenDocumentService.OpenDocumentAsync(System.Uri,Microsoft.VisualStudio.RpcContracts.OpenDocument.OpenDocumentOptions,System.Threading.CancellationToken)">
            <summary>
            Opens document at the given <paramref name="documentUri" />.
            If the document is already open, its document frame is activated and <paramref name="openDocumentOptions" /> are applied.
            If the <paramref name="documentUri" /> represents local file path of a remote file and can be converted to
            remote URI via <see cref="M:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider.ConvertLocalUriToRemoteUriAsync(System.Uri,System.Threading.CancellationToken)" />,
            the remote file will be downloaded and opened.
            If the document is already open, <paramref name="openDocumentOptions" /> are applied to that already open document instead
            (for example <see cref="P:Microsoft.VisualStudio.RpcContracts.OpenDocument.OpenDocumentOptions.Selection" />).
            </summary>
            <param name="documentUri">The URI of the document to open.</param>
            <param name="openDocumentOptions">Options defining how to open the document.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A document moniker of the window frame containing the opened document.</returns>
            <remarks> This method is added in <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_8" /> update.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.OpenDocument.LogicalViewKind">
            <summary>
            Defines kinds of logical document views.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.OpenDocument.LogicalViewKind.Primary">
            <summary>
            Primary (default) document view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.OpenDocument.LogicalViewKind.Any">
            <summary>
            Any defined document view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.OpenDocument.LogicalViewKind.Debugging">
            <summary>
            Debugger document view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.OpenDocument.LogicalViewKind.Code">
            <summary>
            Code editor document view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.OpenDocument.LogicalViewKind.Designer">
            <summary>
            Designer document view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.OpenDocument.LogicalViewKind.Text">
            <summary>
            Text editor document view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.OpenDocument.LogicalViewKind.UserChoose">
            <summary>
            User choosen document view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.OpenDocument.LogicalViewKind.ProjectSpecific">
            <summary>
            Project specific document view.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.OpenDocument.OpenDocumentOptions">
            <summary>
            Options defining how to open documents on the client.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.OpenDocument.OpenDocumentOptions.#ctor(System.Nullable{Microsoft.VisualStudio.RpcContracts.Utilities.Range},System.Nullable{Microsoft.VisualStudio.RpcContracts.Utilities.Range},System.Nullable{Microsoft.VisualStudio.RpcContracts.Utilities.EnsureRangeVisibleOptions},System.Boolean,System.Nullable{System.Boolean},System.Nullable{Microsoft.VisualStudio.RpcContracts.OpenDocument.LogicalViewKind},System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.OpenDocument.OpenDocumentOptions" /> class.
            </summary>
            <param name="selection">Range of document text to be selected on document open. If omitted, no text will be selected.</param>
            <param name="ensureVisible">
            <para>Range of document text to be visible on document open. If omitted, <paramref name="selection" />
            will be used instead.</para>
            <para>The view of the open document will not be scrolled if the text in range is completely visible.
            If the text in the range is partially visible, then the view will be scrolled as little as possible to make
            the text completely visible. If none of the text in the range was visible, then it will be centered in the view.
            Providing <paramref name="ensureVisibleOptions" /> allows for more precise control over scrolling behavior.</para>
            </param>
            <param name="ensureVisibleOptions">Options to control scrolling behavior when <paramref name="ensureVisible" /> argument is provided. If omitted, <see cref="F:Microsoft.VisualStudio.RpcContracts.Utilities.EnsureRangeVisibleOptions.None" /> is used.</param>
            <param name="isPreview">Whether to open document in preview mode. If omitted, document will be open in durable mode.</param>
            <param name="activate">Whether to activate the document after opening by sending an expicit focus.
            If omitted, the document is activated if <paramref name="isPreview" /> is false.</param>
            <param name="logicalView">A kind of logical document view to open. If omitted, <see cref="F:Microsoft.VisualStudio.RpcContracts.OpenDocument.LogicalViewKind.Primary" /> is used.</param>
            <param name="projectId">A project to open document in. If ommitted, document will be open in first project containing the document.</param>
            <param name="editorType">Unique identifier of the editor type. If omitted, standard editor will be created.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.OpenDocument.OpenDocumentOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.OpenDocument.OpenDocumentOptions" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.OpenDocument.OpenDocumentOptions.#ctor(System.Nullable{Microsoft.VisualStudio.RpcContracts.Utilities.Range},System.Nullable{Microsoft.VisualStudio.RpcContracts.Utilities.Range},System.Nullable{Microsoft.VisualStudio.RpcContracts.Utilities.EnsureRangeVisibleOptions},System.Boolean,System.Nullable{System.Boolean},System.Nullable{Microsoft.VisualStudio.RpcContracts.OpenDocument.LogicalViewKind},System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{Microsoft.VisualStudio.RpcContracts.OpenDocument.DocumentWindowCaptionKind},System.String,System.Nullable{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.OpenDocument.OpenDocumentOptions" /> class.
            </summary>
            <param name="selection">Range of document text to be selected on document open. If omitted, no text will be selected.</param>
            <param name="ensureVisible">
            <para>Range of document text to be visible on document open. If omitted, <paramref name="selection" />
            will be used instead.</para>
            <para>The view of the open document will not be scrolled if the text in range is completely visible.
            If the text in the range is partially visible, then the view will be scrolled as little as possible to make
            the text completely visible. If none of the text in the range was visible, then it will be centered in the view.
            Providing <paramref name="ensureVisibleOptions" /> allows for more precise control over scrolling behavior.</para>
            </param>
            <param name="ensureVisibleOptions">Options to control scrolling behavior when <paramref name="ensureVisible" /> argument is provided. If omitted, <see cref="F:Microsoft.VisualStudio.RpcContracts.Utilities.EnsureRangeVisibleOptions.None" /> is used.</param>
            <param name="isPreview">Whether to open document in preview mode. If omitted, document will be open in durable mode.</param>
            <param name="activate">Whether to activate the document after opening by sending an expicit focus.
            If omitted, the document is activated if <paramref name="isPreview" /> is false.</param>
            <param name="logicalView">A kind of logical document view to open. If omitted, <see cref="F:Microsoft.VisualStudio.RpcContracts.OpenDocument.LogicalViewKind.Primary" /> is used.</param>
            <param name="projectId">A project to open document in. If ommitted, document will be open in first project containing the document.</param>
            <param name="editorType">Unique identifier of the editor type. If omitted, standard editor will be created.</param>
            <param name="documentWindowCaptionKind">The kind of the document window caption.</param>
            <param name="customDocumentWindowCaption">Custom document window caption with optional substitutions.</param>
            <param name="isUserReadonly">Whether the document should be open in user readonly mode.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.OpenDocument.OpenDocumentOptions.Selection">
            <summary>
            Gets range of document text to be selected on document open.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.OpenDocument.OpenDocumentOptions.EnsureVisible">
            <summary>
            Gets range of document text to be made visible on document open.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.OpenDocument.OpenDocumentOptions.EnsureVisibleOptions">
            <summary>
            Gets options to control scrolling behavior when <see cref="P:Microsoft.VisualStudio.RpcContracts.OpenDocument.OpenDocumentOptions.EnsureVisible" /> is provided.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.OpenDocument.OpenDocumentOptions.IsPreview">
            <summary>
            Gets a value indicating whether to open document in preview mode.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.OpenDocument.OpenDocumentOptions.Activate">
            <summary>
            Gets a value indicating whether to activate the document after opening by sending an expicit focus.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.OpenDocument.OpenDocumentOptions.LogicalView">
            <summary>
            Gets a kind of logical document view to open.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.OpenDocument.OpenDocumentOptions.ProjectId">
            <summary>
            Gets a project to open document in.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.OpenDocument.OpenDocumentOptions.EditorType">
            <summary>
            Gets unique identifier of the editor type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.OpenDocument.OpenDocumentOptions.DocumentWindowCaptionKind">
            <summary>
            Gets the kind of the document window caption.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.OpenDocument.OpenDocumentOptions.CustomDocumentWindowCaption">
            <summary>
            Gets custom document window caption. The following substitution variables are supported:
             %1 - the project name
             %2 - the document's project item hierarchy name
             %3 - the document name.
            </summary>
            <remarks>Used when <see cref="P:Microsoft.VisualStudio.RpcContracts.OpenDocument.OpenDocumentOptions.DocumentWindowCaptionKind" /> is set to <see cref="F:Microsoft.VisualStudio.RpcContracts.OpenDocument.DocumentWindowCaptionKind.Custom" />.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.OpenDocument.OpenDocumentOptions.IsUserReadonly">
            <summary>
            Gets a value indicating whether the document should be open in user readonly mode.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.OutputChannel.Channel">
            <summary>
            Describes an output channel as it may be obtained from the <see cref="T:Microsoft.VisualStudio.RpcContracts.OutputChannel.IOutputChannelStore" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.OutputChannel.Channel.#ctor(System.String,System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.OutputChannel.Channel" /> class.
            </summary>
            <param name="id">a non-localized, unique identifier for the channel.</param>
            <param name="displayName">the display name for the channel.</param>
            <param name="encoding">the character encoding to use.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.OutputChannel.Channel.Id">
            <summary>
            Gets a non-localized, unique identifier for the channel.
            </summary>
            <remarks>
            This value is expected to be unique and owned by a specific client that creates channels.
            If a consumer ever sees a channel with the same <see cref="P:Microsoft.VisualStudio.RpcContracts.OutputChannel.Channel.Id" /> value as seen previously,
            anything referenced by the old one should be destroyed.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.OutputChannel.Channel.DisplayName">
            <summary>
            Gets the display name for the channel.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.OutputChannel.Channel.Encoding">
            <summary>
            Gets the character encoding for the channel.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.OutputChannel.IOutputChannelStore">
            <summary>
            This interface describes the entity that stores and
            manages a collection of output channels.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.RpcContracts.OutputChannel.IOutputChannelStore.ChannelCreated">
            <summary>
            Occurs when a channel has been created.
            </summary>
            <remarks>
            The string is the <see cref="P:Microsoft.VisualStudio.RpcContracts.OutputChannel.Channel.Id" /> of the channel created.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.RpcContracts.OutputChannel.IOutputChannelStore.ChannelClosed">
            <summary>
            Occurs when a channel has been closed.
            </summary>
            <remarks>
            The string is the <see cref="P:Microsoft.VisualStudio.RpcContracts.OutputChannel.Channel.Id" /> of the closed channel.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.OutputChannel.IOutputChannelStore.GetChannelsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all active channels.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A collection of channel names.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.OutputChannel.IOutputChannelStore.CreateChannelAsync(System.String,System.String,System.IO.Pipelines.PipeReader,System.Text.Encoding,System.Threading.CancellationToken)">
            <summary>
            Creates a new output channel and supplies the <see cref="T:System.IO.Stream" /> used to write to it.
            </summary>
            <param name="id">
            A non-localized, unique string used to identify the created channel.
            </param>
            <param name="displayNameResourceId">
            The ID of the resource that should be used as the <see cref="P:Microsoft.VisualStudio.RpcContracts.OutputChannel.Channel.DisplayName" /> for this channel.
            This ID will be exchanged for the actual <see cref="P:Microsoft.VisualStudio.RpcContracts.OutputChannel.Channel.DisplayName" /> value by calling back to the client via the <see cref="T:Microsoft.VisualStudio.RpcContracts.IStringResourceDictionary" /> interface.
            </param>
            <param name="pipeReader">The reader for the pipe that the store will use to receive data from the channel. When the writer of the pipe is completed, the channel will close.</param>
            <param name="encoding">The <see cref="P:System.Text.Encoding.WebName" /> from the <see cref="T:System.Text.Encoding" /> the caller will use for encoding characters over the <paramref name="pipeReader" />.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the completion of creating the channel.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when <paramref name="id" /> conflicts with an open channel.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.OutputChannel.IOutputChannelStore.OpenChannelAsync(System.String,System.IO.Pipelines.PipeWriter,System.Threading.CancellationToken)">
            <summary>
            Attaches a <see cref="T:System.IO.Stream" /> to an existing channel for read access.
            </summary>
            <param name="id">A non-localized, unique string used to identify the existing channel. This may be a well-known ID or one obtained from <see cref="M:Microsoft.VisualStudio.RpcContracts.OutputChannel.IOutputChannelStore.GetChannelsAsync(System.Threading.CancellationToken)" />.</param>
            <param name="pipeWriter">The writer for the pipe that the store will use to send the channel data back to the caller.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An OutputChannel corresponding to the channel being opened.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the channel <paramref name="id" /> does not match any existing channel.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.OutputChannel.IOutputChannelStore.WriteAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Writes input to the channel. If the channel does not exist, it creates one.
            This method currently mimics the behavior expected from TextWriter.
            </summary>
            <param name="channelName">Name of channel to append input to.</param>
            <param name="message">Message to be output.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.OutputChannel.IOutputChannelStore.WriteLineAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Writes input as a new line to the channel. If the channel does not exist,
            it creates one.
            This method currently mimics the behavior expected from TextWriter.
            </summary>
            <param name="channelName">Name of channel to append input to.</param>
            <param name="message">Message to be output.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.ProgressData">
            <summary>
            A record that represents the progress of some operation
            that is generally representable with a progress status dialog.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.ProgressData.OverallOperation">
            <summary>
            Gets or sets high-level description of the operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.ProgressData.PreciseOperation">
            <summary>
            Gets or sets a more precise description of the operation in progress.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.ProgressData.CurrentStep">
            <summary>
            Gets or sets the step number currently in operation (i.e. one more than the number of completed steps).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.ProgressData.TotalSteps">
            <summary>
            Gets or sets the total number of steps to complete, if known.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.ProgressData.IsCancelable">
            <summary>
            Gets or sets a value indicating whether the operation will respect a cancellation request.
            </summary>
            <value>A boolean value. The default is <see langword="true" />.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.ProjectFileEditing.IProjectFileInvisibleEditorTracker">
            <summary>
            A service for tracking invisible editors that are opened but should be considered as though they are real editors in user editable windows.
            </summary>
            <remarks>
            This supports LiveShare and Cloud Environment server scenarios.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.ProjectFileEditing.IProjectFileInvisibleEditorTracker.EditorOpenedAsync(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Informs the system that the project file is open in a text editor. This should be called before the user can make any edits.
            </summary>
            <param name="projectGuid">The GUID of the project being edited.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A cookie that represents the tracking of the newly opened editor and should be passed to the <see cref="M:Microsoft.VisualStudio.RpcContracts.ProjectFileEditing.IProjectFileInvisibleEditorTracker.EditorClosedAsync(System.Guid,System.Int32,System.Threading.CancellationToken)" /> when the editor is closed, or null if the project guid represents a project that is incompatible with this service.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.ProjectFileEditing.IProjectFileInvisibleEditorTracker.EditorClosedAsync(System.Guid,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Informs the system that the project file editor associated with the cookie has been closed.
            </summary>
            <param name="projectGuid">The GUID of the project being edited.</param>
            <param name="cookie">The cookie that represents the editor being closed, returned from calling <see cref="M:Microsoft.VisualStudio.RpcContracts.ProjectFileEditing.IProjectFileInvisibleEditorTracker.EditorOpenedAsync(System.Guid,System.Threading.CancellationToken)" /> when it was opened.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Resources.Error_AbsoluteUriRequired">
            <summary>
              Looks up a localized string similar to The Uri must be absolute..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Resources.Error_DirectoryMustHaveDirectoryAttribute">
            <summary>
              Looks up a localized string similar to A directory's attributes must include the {0} attribute..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Resources.Error_FileMustNotHaveDirectoryAttribute">
            <summary>
              Looks up a localized string similar to A file's attributes must not include the {0} attribute..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Resources.Error_NonMatchingParameters">
            <summary>
              Looks up a localized string similar to The parameter {0} can not have a value of '{1}' when parameter {2} has a value of '{3}'..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Resources.Error_NonQualifiedName">
            <summary>
              Looks up a localized string similar to The parameter {0} must contain at least one '.' character to define a fully-qualified name using alphanumeric and underscore characters. Invalid characters are removed from the name..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Resources.Error_NonValidFilterName">
            <summary>
              Looks up a localized string similar to The parameter {0} must contain at least one '.' character to define a fully-qualified name filter using alphanumeric and underscore characters or contain exactly one '*' used inplace of a single namespace to qualify as a valid filter..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Resources.Error_RequiredFlagNotSet">
            <summary>
              Looks up a localized string similar to The parameter {0} with value '{1}' must have the flag '{2}' set..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Resources.Error_ReservedErrorCode">
            <summary>
              Looks up a localized string similar to The error code must be less than {0} or greater than {1}..
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Resources.Error_UnspecifiedDateTimeKind">
            <summary>
              Looks up a localized string similar to The {0}'s {1} property cannot be "{2}"..
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Settings.ISettingsManager3">
            <summary>
            Allows read/write access to settings values and subscription to changes.  Obtain this using <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_4Services.SettingsManager" />.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.RpcContracts.Settings.ISettingsManager3.SettingChanged">
            <summary>
            Raised when a setting has changed for settings whose name matches a pattern passed to <see cref="M:Microsoft.VisualStudio.RpcContracts.Settings.ISettingsManager3.RequestChangeEventsAsync(System.String,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Settings.ISettingsManager3.RequestChangeEventsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Enables change events to be raised for settings matching <paramref name="monikerPattern" /> (case insensitive comparison).
            </summary>
            <param name="monikerPattern">A setting name, optionally ending in "*" to indicate that it's a prefix.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An async task.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Settings.ISettingsManager3.GetSettingMonikersAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets all the registered setting monikers starting with <paramref name="monikerPrefix" /> (case insensitive comparison).
            </summary>
            <param name="monikerPrefix">The first part of a setting name; pass an empty string to get all setting monikers.</param>
            <param name="startIndex">The index of the first setting to return.</param>
            <param name="maxCount">The maximum number of settings to return.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An async task whose result is the collection of setting monikers matching the given prefix.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Settings.ISettingsManager3.GetSettingInfosAsync(System.String,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Gets the metadata for all the registered settings starting with <paramref name="monikerPrefix" /> (case insensitive comparison).
            </summary>
            <param name="monikerPrefix">The first part of a setting name; pass an empty string to get all setting monikers.</param>
            <param name="startIndex">The index of the first setting to return.</param>
            <param name="maxCount">The maximum number of settings to return.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An async task whose result is the info for all the settings matching the given prefix.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Settings.ISettingsManager3.GetSettingInfoAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Returns the metadata for a setting.  If the named setting is not registered (registration is optional), the return value
            will express the default metadata for settings without registration.
            </summary>
            <param name="moniker">The setting moniker (case insensitive).</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An async task whose result is the info for the given setting.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Settings.ISettingsManager3.SetValueAsync(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Changes the value of a setting.
            </summary>
            <param name="moniker">The setting moniker (case insensitive).</param>
            <param name="value">The new value for the setting.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the caller lacks permission to change the setting.</exception>
            <returns>An async task.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Settings.ISettingsManager3.GetValueAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the value of a setting.
            </summary>
            <param name="moniker">The setting moniker (case insensitive).</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An async task whose result is an object representing success or failure.  If the query succeeded, that object also supplies the setting value.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Settings.SettingInfo">
            <summary>
            Information about a setting.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Settings.SettingInfo.#ctor(System.String,System.String,System.String,System.String,Newtonsoft.Json.Linq.JObject,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Settings.SettingInfo" /> class.
            </summary>
            <param name="moniker">The setting moniker.</param>
            <param name="localizedName">The localized name of the setting, if it has one; otherwise null.</param>
            <param name="localizedDescription">The localized description of the setting, if it has one; otherwise null.</param>
            <param name="searchKeywords">The search keywords for the setting, if it has any; otherwise null.</param>
            <param name="jsonSchema">The JSON schema for the setting.</param>
            <param name="isWritable">A value indicating whether the setting can be modified in the current context.</param>
            <param name="isRemotable">A value indicating whether the setting is addressed remotely when connected.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Settings.SettingInfo.Moniker">
            <summary>
            Gets the moniker of the setting.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Settings.SettingInfo.LocalizedName">
            <summary>
            Gets the localized name of the setting, or null if the setting has no localized name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Settings.SettingInfo.LocalizedDescription">
            <summary>
            Gets the localized description of the setting, or null if the setting has no localized description.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Settings.SettingInfo.SearchKeywords">
            <summary>
            Gets a localized string containing search keywords for the setting, or null if the setting has no keywords.
            For search keyword matching, the string is tokenized using whitespace and punctuation as delimiters.  Capital letters
            are also respected for camelCase matching.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Settings.SettingInfo.JsonSchema">
            <summary>
            Gets a JSON schema representing the allowed values for the setting. See https://json-schema.org/.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Settings.SettingInfo.IsWritable">
            <summary>
            Gets a value indicating whether the caller is allowed to modify the setting.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Settings.SettingInfo.IsRemotable">
            <summary>
            Gets a value indicating whether the setting exists on the remote side of a Visual Studio Online connection, instead
            of locally, when connected.  When not connected, this property can still return true if the setting would be remote
            when connected.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Settings.SettingRequestResult">
            <summary>
            The result of a request to retrieve a setting value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Settings.SettingRequestResult.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Settings.SettingRequestResult" /> class representing a successful setting retrieval.
            </summary>
            <param name="value">The setting value.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Settings.SettingRequestResult.Failure">
            <summary>
            Gets a <see cref="T:Microsoft.VisualStudio.RpcContracts.Settings.SettingRequestResult" /> representing a failed setting retrieval.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Settings.SettingRequestResult.Succeeded">
            <summary>
            Gets a value indicating whether the request succeeded.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Settings.SettingRequestResult.Value">
            <summary>
            Gets the value of the setting. Only valid if <see cref="P:Microsoft.VisualStudio.RpcContracts.Settings.SettingRequestResult.Succeeded" /> == true.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Settings.SettingRequestResult.DeserializeValue``1">
            <summary>
            Returns the setting value converted to the given type.  Avoids loading Newtonsoft.Json if possible.
            </summary>
            <typeparam name="T">The type to which the value will be converted.</typeparam>
            <returns>The converted value.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Setup.IMissingComponentRegistrationService">
            <summary>
            A service that enables extensions to register all the missing components required by a given project.
            This service is intended to be a singleton service that tracks all missing component ID registrations.
            Project load vetoers, for example, can use this service to indicate which components need to be
            installed for a given project to load successfully.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Setup.IMissingComponentRegistrationService.RegisterMissingComponentsAsync(System.Collections.Generic.IReadOnlyDictionary{System.Guid,System.Collections.Generic.IReadOnlyCollection{System.String}},System.Threading.CancellationToken)">
            <summary>
            Registers the set of missing components for the specified projects.
            </summary>
            <param name="projectGuidToVSComponentIdsMap">A map from project GUIDs to collections of missing Visual Studio components for each project.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.SingleFileGenerators.ISingleFileGenerator">
            <summary>
            Provides a way to schedule the Single File Generator.
            Obtain this using <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_5Services.SingleFileGenerator" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.SingleFileGenerators.ISingleFileGenerator.GenerateCodeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Triggers the single file generation on the single input file at <paramref name="filePath" />to generate the single output file.
            The result of the transformation may be source code, or any other output that is useful. An example
            is resources code file generated in response to changes in a visual designer that creates a resx file.
            </summary>
            <param name="filePath">Input file path on which to run the Single File Generator.</param>
            <param name="fileProject">The Project file that the Input file belongs to.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the result of the asynchronous operation.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService">
            <summary>
            Provides functionality to work with solutions, filters and projects.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService.ProjectsLoaded">
            <summary>
            Raised when a project is loaded.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService.ProjectsUnloaded">
            <summary>
            Raised when a project is unloaded.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService.ProjectLoadProgressChanged">
            <summary>
            Raised when the project load status has changed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService.UnloadProjectsAsync(System.Guid[],Microsoft.VisualStudio.RpcContracts.Solution.ProjectUnloadReason,System.Threading.CancellationToken)">
            <summary>
            Unloads projects and sets the reason for unloading them.
            </summary>
            <param name="projectIds">The GUIDs of the projects.</param>
            <param name="unloadReason">The <see cref="T:Microsoft.VisualStudio.RpcContracts.Solution.ProjectUnloadReason" />.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>If all projects were already unloaded, it returns 'false'. Else, it returns 'true'.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService.LoadProjectsAsync(System.Guid[],System.Threading.CancellationToken)">
            <summary>
            Loads projects without requiring any dependencies to be loaded.
            </summary>
            <param name="projectIds">The GUIDs of the projects.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>If all projects were already loaded, it returns 'false'. Else, it returns 'true'.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService.RemoveProjectsAsync(System.Collections.Generic.IReadOnlyList{System.Guid},System.Threading.CancellationToken)">
            <summary>
            Removes projects from the solution.
            </summary>
            <param name="projectIds">The GUIDs of the projects.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>If all projects were already removed, it returns 'false'. Else, it returns 'true'.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService.AreProjectsLoadedAsync(System.Guid[],System.Threading.CancellationToken)">
            <summary>
            Checks if the projects are loaded.
            </summary>
            <param name="projectIds">The GUID of the project.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>If the project is currently loaded, it returns 'true'. Else, it returns 'false'.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService.SubscribeToOpenCodeContainersStateAsync(System.IObserver{Microsoft.VisualStudio.RpcContracts.Solution.OpenCodeContainersState},System.Threading.CancellationToken)">
            <summary>
            Attaches an observer for updates to open code containers state.
            </summary>
            <param name="observer">An observer of open code containers state.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A value that may be disposed of to unregister the <paramref name="observer" /> from future notifications.</returns>
            <remarks>
            <para>The initial state of open code containers will be sent immediately to the observer.</para>
            <para>This method was added in Visual Studio 16.9.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService.GetOpenCodeContainersStateAsync(System.Threading.CancellationToken)">
            <summary>
            Gets open code containers state.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>The current open code container state.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService.SaveSolutionFilterFileAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Saves a filter file at the specified location. It overwrites any existing file.
            </summary>
            <param name="filterFileDirectory">Location of the filter file.</param>
            <param name="filterFileName">Name of the filter file with extension.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService.CloseSolutionAndFolderAsync(System.Threading.CancellationToken)">
            <summary>
            Closes the currently open solution or folder.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task that represents the completion of closing the solution or folder.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService.RequestProjectEventsAsync(System.Threading.CancellationToken)">
            <summary>
            Request that project load events be raised. If this method is not called, instances
            of <see cref="T:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService" /> will not raise the <see cref="E:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService.ProjectLoadProgressChanged" />,
            <see cref="E:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService.ProjectsLoaded" />, <see cref="E:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService.ProjectsUnloaded" /> events.
            </summary>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>A task representing the async operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService.GetPropertyValuesAsync(System.Collections.Generic.IReadOnlyList{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Gets the values of the properties for the solution.
            </summary>
            <param name="propertyIds">Array of unique integer identifiers of solution properties.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An array of property values that are of type <see langword="string" /> or a <see langword="null" /> array element for any unsupported properties, including when a property value was not of the type <see langword="string" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService.GetSolutionTelemetryContextPropertyValuesAsync(System.Collections.Generic.IReadOnlyList{System.String},System.Threading.CancellationToken)">
            <summary>
            Gets solution context related telemetry properties.
            </summary>
            <param name="propertyNames">Array of solution context telemetry property names.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>An array of property values.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService.LoadProjectsWithResultAsync(System.Guid[],System.Threading.CancellationToken)">
            <summary>
            Loads projects without requiring any dependencies to be loaded returning a <see cref="T:Microsoft.VisualStudio.RpcContracts.Solution.ProjectLoadResult" />.
            </summary>
            <param name="projectIds">The GUIDs of the projects.</param>
            <param name="cancellationToken">A cancellation token.</param>
            <returns>Returns a <see cref="T:Microsoft.VisualStudio.RpcContracts.Solution.ProjectLoadResult" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Solution.OpenCodeContainersState">
            <summary>
            Describes the state of an open solution and/or folder.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Solution.OpenCodeContainersState.SolutionFilePath">
            <summary>
            Gets the path to the open solution file, if any.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Solution.OpenCodeContainersState.OpenFolderPaths">
            <summary>
            Gets the path to the open folder, if any.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Solution.OpenCodeContainersState.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Solution.OpenCodeContainersState.Equals(Microsoft.VisualStudio.RpcContracts.Solution.OpenCodeContainersState)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Solution.ProjectLoadResult">
            <summary>
            Represents results from loading a project. Used in <see cref="T:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService" />.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Solution.ProjectLoadResult.LoadResults">
            <summary>
            Enum tracking open result.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Solution.ProjectLoadResult.LoadResults.None">
            <summary>
            No projects got loaded.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Solution.ProjectLoadResult.LoadResults.SomeLoaded">
            <summary>
            Some projects were loaded.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Solution.ProjectLoadResult.LoadResults.UnsupportedProjectLoadBlocked">
            <summary>
            Some unsupported project load was blocked as incompatible.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Solution.ProjectLoadResult.LoadStatus">
            <summary>
            Gets or sets property tracking the actual project load result.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Solution.ProjectsLoadedEventArgs">
            <summary>
            Event data for the project loaded event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Solution.ProjectsLoadedEventArgs.#ctor(System.Collections.Generic.IReadOnlyList{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Solution.ProjectsLoadedEventArgs" /> class.
            </summary>
            <param name="projectIds">Unique identifier of the loaded projects.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Solution.ProjectsLoadedEventArgs.ProjectIds">
            <summary>
            Gets unique identifier of the loaded projects.
            </summary>
            <returns>Unique identifier of the projects.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Solution.ProjectsLoadProgressEventArgs">
            <summary>
            Event data for project load status.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Solution.ProjectsLoadProgressEventArgs.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Solution.ProjectsLoadProgressEventArgs" /> class.
            </summary>
            <param name="currentProjectDisplayName">The name of the project that is loading.</param>
            <param name="projectsLoaded">Number of projects that have loaded so far.</param>
            <param name="totalProjects">Total number of projects to load.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Solution.ProjectsLoadProgressEventArgs.CurrentProjectDisplayName">
            <summary>
            Gets the name of the project that is loading.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Solution.ProjectsLoadProgressEventArgs.ProjectsLoaded">
            <summary>
            Gets number of projects that have loaded so far.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Solution.ProjectsLoadProgressEventArgs.TotalProjects">
            <summary>
            Gets total number of projects to load.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Solution.ProjectsUnloadedEventArgs">
            <summary>
            Event data for the project unloaded event.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Solution.ProjectsUnloadedEventArgs.#ctor(System.Collections.Generic.IReadOnlyList{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Solution.ProjectsUnloadedEventArgs" /> class.
            </summary>
            <param name="projectIds">Unique identifier of the unloaded projects.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Solution.ProjectsUnloadedEventArgs.ProjectIds">
            <summary>
            Gets unique identifier of the loaded projects.
            </summary>
            <returns>Unique identifier of the projects.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Solution.ProjectUnloadReason">
            <summary>
            Represents different reasons for unloading a project. Used in <see cref="M:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService.UnloadProjectsAsync(System.Guid[],Microsoft.VisualStudio.RpcContracts.Solution.ProjectUnloadReason,System.Threading.CancellationToken)" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Solution.ProjectUnloadReason.Unknown">
            <summary>
            Default reason to unload the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Solution.ProjectUnloadReason.UnloadedByUser">
            <summary>
            The user unloaded the project.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Solution.ProjectUnloadReason.LoadPendingIfNeeded">
            <summary>
            The project load is pending and will happen if needed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Solution.ProjectUnloadReason.UpgradeFailed">
            <summary>
            The project was unloaded because project migration/upgrade failed.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Solution.ProjectUnloadReason.NeedRetarget">
            <summary>
            The project was unloaded because project target is not supported by current version or edition of Visual Studio.
            The project must be retargeted before it can be reloaded.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Solution.ProjectUnloadReason.NeedComponents">
            <summary>
            The project was unloaded because some components (Visual Studio components or SDKs) are not installed on the system,
            and the components are essential for the proper operation of this project.
            In order to be loaded, the project has to install the missing components.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Solution.ProjectUnloadReason.ProjectIncompatible">
            <summary>
            The project is incompatible.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Utilities.ByValue">
            <content>
            The <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.ByValue.DictionaryEqualityComparer`2" /> nested class.
            </content>
            <summary>
            Provides by-value equality and hashing functions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Utilities.ByValue.DictionaryEqualityComparer`2">
            <summary>
            A by-value equality comparer for <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />.
            </summary>
            <typeparam name="TKey">The type of key used in the dictionary.</typeparam>
            <typeparam name="TValue">The type of value used in the dictionary.</typeparam>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Utilities.ByValue.DictionaryEqualityComparer`2.Instance">
            <summary>
            The singleton instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.ByValue.DictionaryEqualityComparer`2.Equals(System.Collections.Generic.IReadOnlyDictionary{`0,`1},System.Collections.Generic.IReadOnlyDictionary{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.ByValue.DictionaryEqualityComparer`2.GetHashCode(System.Collections.Generic.IReadOnlyDictionary{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.ByValue.Equal``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <inheritdoc cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)" />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.ByValue.GetHashCode``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1})">
            <inheritdoc cref="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)" />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.ByValue.Equal(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <inheritdoc cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)" />
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Utilities.CultureInfoFormatter">
            <summary>
            Enables formatting the default/empty <see cref="T:System.Globalization.CultureInfo" /> class.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Utilities.CultureInfoFormatter.Instance">
            <summary>
            The singleton instance of the formatter to be used.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.CultureInfoFormatter.Deserialize(MessagePack.MessagePackReader@,MessagePack.MessagePackSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.CultureInfoFormatter.Serialize(MessagePack.MessagePackWriter@,System.Globalization.CultureInfo,MessagePack.MessagePackSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Utilities.EncodingConverter">
            <summary>
            A converter to allow <see cref="T:System.Text.Encoding" /> to be serialized by its <see cref="P:System.Text.Encoding.WebName" />.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.EncodingConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Text.Encoding,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.EncodingConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Text.Encoding,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Utilities.EncodingFormatter">
            <summary>
            Enables formatting the default/empty <see cref="T:System.Text.Encoding" /> class.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Utilities.EncodingFormatter.Instance">
            <summary>
            The singleton instance of the formatter to be used.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.EncodingFormatter.Serialize(MessagePack.MessagePackWriter@,System.Text.Encoding,MessagePack.MessagePackSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.EncodingFormatter.Deserialize(MessagePack.MessagePackReader@,MessagePack.MessagePackSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Utilities.EnsureRangeVisibleOptions">
            <summary>
            Options to control scrolling behavior of the document view when navigating to a <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.Range" />.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Utilities.EnsureRangeVisibleOptions.ShowStart">
            <summary>
            Ensure that the start of the range is visible if it is impossible to display the entire range.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Utilities.EnsureRangeVisibleOptions.MinimumScroll">
            <summary>
            Do the minimum amount of scrolling to display the range in the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Utilities.EnsureRangeVisibleOptions.AlwaysCenter">
            <summary>
            Always center the range in the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Utilities.EnsureRangeVisibleOptions.None">
            <summary>
            Ensure that the end of the range is visible if it is impossible to display the entire span. If none of the text
            in the range is currently visible, center the span in the view.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Utilities.EventArgsFormatter">
            <summary>
            Enables formatting the default/empty <see cref="T:System.EventArgs" /> class.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Utilities.EventArgsFormatter.Instance">
            <summary>
            The singleton instance of the formatter to be used.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.EventArgsFormatter.Serialize(MessagePack.MessagePackWriter@,System.EventArgs,MessagePack.MessagePackSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.EventArgsFormatter.Deserialize(MessagePack.MessagePackReader@,MessagePack.MessagePackSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier">
            <summary>
            Structure identifying a project context's state at the time of setting Diagnostics.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier" /> structure.
            </summary>
            <remarks>
            Struct creation will automatically assume that this project is not active at the time of creation. Please use
            the init accessor for <see cref="P:Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier.IsContextActive" /> to indicate otherwise.
            </remarks>
            <param name="name">The name of the project in which the diagnostic was generated.</param>
            <param name="context">The context in which the diagnostic was generated (e.g. win32, macOS).</param>
            <param name="identifier">The unique context guid identifier used by the consumer to uniquely identify contexts.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier.Name">
            <summary>
            Gets the name of the project.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier.Context">
            <summary>
            Gets the context in which the diagnostic was generated (e.g. win32, macOS).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier.Identifier">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier" />. This is usually the project GUID.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier.IsContextActive">
            <summary>
            Gets a value indicating whether the context was active at the time of state capture.
            </summary>
            <remarks>
            Default value is false unless otherwise set.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier.DisplayName">
            <summary>
            Gets the human-readable combination of the <see cref="P:Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier.Name" /> and <see cref="P:Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier.Context" />.
            </summary>
            <remarks>
            Displayed as "<see cref="P:Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier.Name" />" if <see cref="P:Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier.Context" /> is null or
            "<see cref="P:Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier.Name" /> (<see cref="P:Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier.Context" />)" otherwise.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier.op_Equality(Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier,Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier)">
            <summary>
            Indicates whether <paramref name="left" /> and <paramref name="right" /> equiavlent.
            </summary>
            <param name="left">Left item.</param>
            <param name="right">Right item.</param>
            <returns>True if the items are equiavlent.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier.op_Inequality(Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier,Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier)">
            <summary>
            Indicates whether <paramref name="left" /> and <paramref name="right" /> different.
            </summary>
            <param name="left">Left item.</param>
            <param name="right">Right item.</param>
            <returns>True if the items are different.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier.Equals(System.Object)">
            <summary>
            Compares a <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier" /> to an object.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>Boolean that indicates whether they're equal or not.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier.GetHashCode">
            <summary>
            Gets a unique hash code for the instance called on.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier.Equals(Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier)">
            <summary>
            Compares two <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.ProjectIdentifier" /> to each other.
            </summary>
            <param name="other">Other instance to comapre against.</param>
            <returns>Boolean indicating whether they are equal or not.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Utilities.Range">
            <summary>
            A struct describing a span of text in a document.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.Utilities.Range.Unknown">
            <summary>
            Used when the range for a diagnostic is unknown.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.Range.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.Range" /> struct.
            </summary>
            <param name="startLine">The line (0-based) of the start of the span.</param>
            <param name="startColumn">The offset (0-based) offset from the start of <paramref name="startLine" /> for the start of the span.</param>
            <param name="endLine">The line (0-based) of the end of the span.</param>
            <param name="endColumn">The offset (0-based) offset from the start of <paramref name="endLine" /> for the end of the span.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Utilities.Range.StartLine">
            <summary>
            Gets the line (0-based) of the start of the span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Utilities.Range.StartColumn">
            <summary>
            Gets the offset (0-based) offset from the start of <see cref="P:Microsoft.VisualStudio.RpcContracts.Utilities.Range.StartLine" /> for the start of the span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Utilities.Range.EndLine">
            <summary>
            Gets the line (0-based) of the end of the span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.Utilities.Range.EndColumn">
            <summary>
            Gets the offset (0-based) offset from the start of <see cref="P:Microsoft.VisualStudio.RpcContracts.Utilities.Range.EndLine" /> for the end of the span.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.Range.op_Equality(Microsoft.VisualStudio.RpcContracts.Utilities.Range,Microsoft.VisualStudio.RpcContracts.Utilities.Range)">
            <summary>
            Indicates whether <paramref name="left" /> and <paramref name="right" /> equiavlent.
            </summary>
            <param name="left">Left item.</param>
            <param name="right">Right item.</param>
            <returns>True if the items are equiavlent.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.Range.op_LessThan(Microsoft.VisualStudio.RpcContracts.Utilities.Range,Microsoft.VisualStudio.RpcContracts.Utilities.Range)">
            <summary>
            Indicates whether <paramref name="left" /> is less than <paramref name="right" />.
            </summary>
            <param name="left">Left item.</param>
            <param name="right">Right item.</param>
            <returns>True if <paramref name="left" /> is less than <paramref name="right" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.Range.op_LessThanOrEqual(Microsoft.VisualStudio.RpcContracts.Utilities.Range,Microsoft.VisualStudio.RpcContracts.Utilities.Range)">
            <summary>
            Indicates whether <paramref name="left" /> is less than or equal to <paramref name="right" />.
            </summary>
            <param name="left">Left item.</param>
            <param name="right">Right item.</param>
            <returns>True if <paramref name="left" /> is less than or equal to <paramref name="right" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.Range.op_GreaterThan(Microsoft.VisualStudio.RpcContracts.Utilities.Range,Microsoft.VisualStudio.RpcContracts.Utilities.Range)">
            <summary>
            Indicates whether <paramref name="left" /> is greater than <paramref name="right" />.
            </summary>
            <param name="left">Left item.</param>
            <param name="right">Right item.</param>
            <returns>True if <paramref name="left" /> is greater than <paramref name="right" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.Range.op_GreaterThanOrEqual(Microsoft.VisualStudio.RpcContracts.Utilities.Range,Microsoft.VisualStudio.RpcContracts.Utilities.Range)">
            <summary>
            Indicates whether <paramref name="left" /> is greater than or equal to <paramref name="right" />.
            </summary>
            <param name="left">Left item.</param>
            <param name="right">Right item.</param>
            <returns>True if <paramref name="left" /> is greater than or equal to <paramref name="right" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.Range.op_Inequality(Microsoft.VisualStudio.RpcContracts.Utilities.Range,Microsoft.VisualStudio.RpcContracts.Utilities.Range)">
            <summary>
            Indicates whether <paramref name="left" /> and <paramref name="right" /> different.
            </summary>
            <param name="left">Left item.</param>
            <param name="right">Right item.</param>
            <returns>True if the items are different.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.Range.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.Range.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.Range.Equals(Microsoft.VisualStudio.RpcContracts.Utilities.Range)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.Range.CompareTo(Microsoft.VisualStudio.RpcContracts.Utilities.Range)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.Range.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.Utilities.ServiceJsonRpcDescriptorWithCommonConverters">
            <summary>
            A <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor" /> derived type that adds common converters.
            </summary>
            <devremarks>
            This class is *INTERNAL* so that it's safe to modify the set of converters without worrying about breaking external code.
            </devremarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.ServiceJsonRpcDescriptorWithCommonConverters.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Type,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters,Nerdbank.Streams.MultiplexingStream.Options)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.ServiceJsonRpcDescriptorWithCommonConverters" /> class.
            </summary>
            <inheritdoc cref="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Type,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters,Nerdbank.Streams.MultiplexingStream.Options)" />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.ServiceJsonRpcDescriptorWithCommonConverters.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.ServiceJsonRpcDescriptorWithCommonConverters" /> class.
            </summary>
            <inheritdoc cref="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters)" />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.ServiceJsonRpcDescriptorWithCommonConverters.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Type,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.Utilities.ServiceJsonRpcDescriptorWithCommonConverters" /> class.
            </summary>
            <inheritdoc cref="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Type,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters)" />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.ServiceJsonRpcDescriptorWithCommonConverters.#ctor(Microsoft.VisualStudio.RpcContracts.Utilities.ServiceJsonRpcDescriptorWithCommonConverters)">
            <inheritdoc cref="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor)" />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.ServiceJsonRpcDescriptorWithCommonConverters.Clone">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.Utilities.ServiceJsonRpcDescriptorWithCommonConverters.CreateFormatter">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.JsonConverters.DiscriminatedTypeJsonConverter`1">
            <summary>
            Allows type hierarchies to be de/serialized by automatically applying, and then reading, an additional json property
            with a type discriminator value. In addition to the <see cref="T:Newtonsoft.Json.JsonConverterAttribute" />, the base type
            should also be decorated with one or more <see cref="T:Microsoft.VisualStudio.RpcContracts.JsonConverters.TypeDiscriminatorAttribute" />.
            </summary>
            <typeparam name="TBase">The base type of the hierarchy.</typeparam>
            <remarks>
            All subtypes in the type hierarchy must support initialization via a constructor. This converter will not work with
            subtypes that only have default constructors and writable properties.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.JsonConverters.DiscriminatedTypeJsonConverter`1.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.JsonConverters.DiscriminatedTypeJsonConverter`1" /> class,
             using '$rpctype' for the name of the property that stores the type discriminator value.
            
             Failures in type discrimation will throw.
            
             <typeparamref name="TBase" /> must be a concrete type. To use an abstract type for <typeparamref name="TBase" />
             use either the overload <see cref="M:Microsoft.VisualStudio.RpcContracts.JsonConverters.DiscriminatedTypeJsonConverter`1.#ctor(System.Type)" /> or
             <see cref="M:Microsoft.VisualStudio.RpcContracts.JsonConverters.DiscriminatedTypeJsonConverter`1.#ctor(System.Type,System.String)" />.
             </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.JsonConverters.DiscriminatedTypeJsonConverter`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.JsonConverters.DiscriminatedTypeJsonConverter`1" /> class,
            using '$rpctype' for the name of the property that stores the type discriminator value.
            </summary>
            <param name="useNullInsteadOfBaseType">Whether the converter should return null as the fallback value instead of the <typeparamref name="TBase">base type</typeparamref>.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.JsonConverters.DiscriminatedTypeJsonConverter`1.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.JsonConverters.DiscriminatedTypeJsonConverter`1" /> class,
            using '$rpctype' for the name of the property that stores the type discriminator value.
            </summary>
            <param name="useNullInsteadOfBaseType">Whether the converter should return null as the fallback value instead of the <typeparamref name="TBase">base type</typeparamref>.</param>
            <param name="jsonPropertyName">The name of the json property used to hold the type discriminator value.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.JsonConverters.DiscriminatedTypeJsonConverter`1.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.JsonConverters.DiscriminatedTypeJsonConverter`1" /> class,
            using '$rpctype' for the name of the property that stores the type discriminator value.
            </summary>
            <param name="fallbackType">
                A type used as a fallback value when type discrimination fails. Failures can occur
                when the type disciminator value is null, not a string, or does not correspond to
                a known type.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.JsonConverters.DiscriminatedTypeJsonConverter`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.JsonConverters.DiscriminatedTypeJsonConverter`1" /> class,
            using <typeparamref name="TBase" /> as the fallback type.
            </summary>
            <param name="jsonPropertyName">The name of the json property used to hold the type discriminator value.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.JsonConverters.DiscriminatedTypeJsonConverter`1.#ctor(System.Type,System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.JsonConverters.DiscriminatedTypeJsonConverter`1" /> class.
             </summary>
             <param name="fallbackType">
                 A type used as a fallback value when type discrimination fails. Failures can occur
                 when the type disciminator value is null, not a string, or does not correspond to
                 a known type.
            
                 Pass null to have the converter return null when type discrimination fails.
             </param>
             <param name="jsonPropertyName">The name of the json property used to hold the type discriminator value.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.JsonConverters.DiscriminatedTypeJsonConverter`1.#ctor(System.String,System.Type)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.JsonConverters.DiscriminatedTypeJsonConverter`1" /> class.
             </summary>
             <param name="jsonPropertyName">The name of the json property used to hold the type discriminator value.</param>
             <param name="fallbackType">
                 A type used as a fallback value when type discrimination fails. Failures can occur
                 when the type disciminator value is null, not a string, or does not correspond to
                 a known type.
            
                 Pass null to have the converter return null when type discrimination fails.
             </param>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.JsonConverters.DiscriminatedTypeJsonConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,`0,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.JsonConverters.DiscriminatedTypeJsonConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,`0,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.JsonConverters.DiscriminatedTypeJsonConverter`1.RemoveConverterForBaseTypeContractResolver">
            <summary>
            When a <see cref="T:Newtonsoft.Json.JsonConverter" /> is applied to a type using the <see cref="T:Newtonsoft.Json.JsonConverterAttribute" />, that converter
            will usually take precedence. This can lead to infinite recursion when trying to deserialize to <typeparamref name="TBase" />.
            When applied to <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> this contract resolver allows us to
            get default de/serializing behavior for <typeparamref name="TBase" /> without the infinite recursion.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.JsonConverters.TypeDiscriminatorAttribute">
            <summary>
            Used with the <see cref="T:Microsoft.VisualStudio.RpcContracts.JsonConverters.DiscriminatedTypeJsonConverter`1" /> to define the types in a hierarchy and their
            associated discriminator value. Apply this to the base type of the type hierarchy, one for each subtype.
            When the base type is concrete and might also be serialized to JSON, this should also be applied
            to the base type itself.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.JsonConverters.TypeDiscriminatorAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.JsonConverters.TypeDiscriminatorAttribute" /> class,
            using the short name of the <paramref name="type" /> as the discriminator value.
            </summary>
            <param name="type">The type represented by the discriminator value.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.JsonConverters.TypeDiscriminatorAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.JsonConverters.TypeDiscriminatorAttribute" /> class.
            </summary>
            <param name="type">The type represented by the <paramref name="discriminatorValue">discriminator value</paramref>.</param>
            <param name="discriminatorValue">
                The discriminator value used to represent the <paramref name="type">type</paramref>.
                Must not be null, empty or consist only of whitespace.
            </param>
            <remarks>The <paramref name="discriminatorValue" /> must be unique within a discriminated type hierarchy.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.JsonConverters.TypeDiscriminatorAttribute.Type">
            <summary>
            Gets the type represented by the <see cref="P:Microsoft.VisualStudio.RpcContracts.JsonConverters.TypeDiscriminatorAttribute.Value">discriminator value</see>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.JsonConverters.TypeDiscriminatorAttribute.Value">
            <summary>
            Gets the discriminator value that represents the <see cref="P:Microsoft.VisualStudio.RpcContracts.JsonConverters.TypeDiscriminatorAttribute.Type">type</see>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.VersionInfoService.IVersionInfoService">
            <summary>
            This service is intended to be used as a means of getting various version information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.VersionInfoService.IVersionInfoService.GetVersionInformationAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a <see cref="T:Microsoft.VisualStudio.RpcContracts.VersionInfoService.VersionInformation" /> containing version information about VS.
            </summary>
            <param name="cancellationToken">A CancellationToken.</param>
            <returns> A <see cref="T:Microsoft.VisualStudio.RpcContracts.VersionInfoService.VersionInformation" /> containing version information about VS. </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.VersionInfoService.VersionInformation">
            <summary>
            Describes version information of a running Visual Studio instance.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.VersionInfoService.VersionInformation.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.VersionInfoService.VersionInformation" /> class.
            </summary>
            <param name="visualStudioVersion">The version of the exe.</param>
            <param name="liveShareVersion">The version of the live share extension.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.VersionInfoService.VersionInformation.#ctor(System.String,System.Version,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.RpcContracts.VersionInfoService.VersionInformation" /> class.
            </summary>
            <param name="visualStudioVersion">The version of the exe.</param>
            <param name="visualStudioComparableVersion">A computationally comparable version of the primary server process.</param>
            <param name="liveShareVersion">The version of the live share extension.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.VersionInfoService.VersionInformation.VisualStudioVersion">
            <summary>
            Gets the display version of the primary server process.
            </summary>
            <remarks>
            This string may *not* be safely parsed with <see cref="M:System.Version.Parse(System.String)" />.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.VersionInfoService.VersionInformation.VisualStudioComparableVersion">
            <summary>
            Gets a computationally comparable version of the primary server process.
            </summary>
            <remarks>
            This will be null from Visual Studio versions prior to v16.8.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.RpcContracts.VersionInfoService.VersionInformation.LiveShareVersion">
            <summary>
            Gets the Live Share version of the server.
            </summary>
            <remarks>
            This string can be safely parsed with <see cref="M:System.Version.Parse(System.String)" />.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.RpcContracts.WellKnownProtectedOperations">
            <summary>
            A collection of documented monikers for <see cref="T:Microsoft.ServiceHub.Framework.Services.ProtectedOperation" /> to represent various sensitive operations within Visual Studio,
            along with convenience methods for creating these <see cref="T:Microsoft.ServiceHub.Framework.Services.ProtectedOperation" /> instances.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.WellKnownProtectedOperations.WriteFileAccess">
            <summary>
            The moniker used to represent modifying a file within the open solution or folder.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.WellKnownProtectedOperations.RunTask">
            <summary>
            The moniker used to represent executing a build or other task defined within the open solution or folder.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.WellKnownProtectedOperations.LaunchDebug">
            <summary>
            The moniker used to represent spawning a process defined by a project in the open solution or folder, possibly with a debugger attached.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.RpcContracts.WellKnownProtectedOperations.ClientIsOwner">
            <summary>
            The moniker used to represent a check for whether the client is owned by the same user account that owns the host
            and therefore merits full owner trust permissions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.WellKnownProtectedOperations.CreateWriteFileAccess">
            <summary>
            Creates a new <see cref="T:Microsoft.ServiceHub.Framework.Services.ProtectedOperation" /> that represents a <see cref="F:Microsoft.VisualStudio.RpcContracts.WellKnownProtectedOperations.WriteFileAccess" /> operation.
            </summary>
            <returns>An instance of <see cref="T:Microsoft.ServiceHub.Framework.Services.ProtectedOperation" /> that may be passed to <see cref="M:Microsoft.ServiceHub.Framework.Services.IAuthorizationService.CheckAuthorizationAsync(Microsoft.ServiceHub.Framework.Services.ProtectedOperation,System.Threading.CancellationToken)" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.WellKnownProtectedOperations.CreateRunTask">
            <summary>
            Creates a new <see cref="T:Microsoft.ServiceHub.Framework.Services.ProtectedOperation" /> that represents a <see cref="F:Microsoft.VisualStudio.RpcContracts.WellKnownProtectedOperations.RunTask" /> operation.
            </summary>
            <returns>An instance of <see cref="T:Microsoft.ServiceHub.Framework.Services.ProtectedOperation" /> that may be passed to <see cref="M:Microsoft.ServiceHub.Framework.Services.IAuthorizationService.CheckAuthorizationAsync(Microsoft.ServiceHub.Framework.Services.ProtectedOperation,System.Threading.CancellationToken)" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.WellKnownProtectedOperations.CreateLaunchDebug">
            <summary>
            Creates a new <see cref="T:Microsoft.ServiceHub.Framework.Services.ProtectedOperation" /> that represents a <see cref="F:Microsoft.VisualStudio.RpcContracts.WellKnownProtectedOperations.LaunchDebug" /> operation.
            </summary>
            <returns>An instance of <see cref="T:Microsoft.ServiceHub.Framework.Services.ProtectedOperation" /> that may be passed to <see cref="M:Microsoft.ServiceHub.Framework.Services.IAuthorizationService.CheckAuthorizationAsync(Microsoft.ServiceHub.Framework.Services.ProtectedOperation,System.Threading.CancellationToken)" />.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.RpcContracts.WellKnownProtectedOperations.CreateClientIsOwner">
            <summary>
            Creates a new <see cref="T:Microsoft.ServiceHub.Framework.Services.ProtectedOperation" /> that represents a <see cref="F:Microsoft.VisualStudio.RpcContracts.WellKnownProtectedOperations.ClientIsOwner" /> operation.
            </summary>
            <returns>An instance of <see cref="T:Microsoft.ServiceHub.Framework.Services.ProtectedOperation" /> that may be passed to <see cref="M:Microsoft.ServiceHub.Framework.Services.IAuthorizationService.CheckAuthorizationAsync(Microsoft.ServiceHub.Framework.Services.ProtectedOperation,System.Threading.CancellationToken)" />.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.VisualStudioServices">
            <content>
            VS2019 Update 10 services.
            </content>
            <content>
            VS2019 Update 11 services.
            </content>
            <summary>
            Provides access to Visual Studio services, by version.
            </summary>
            <content>
            VS2019 Update 4 services.
            </content>
            <content>
            VS2019 Update 5 services.
            </content>
            <content>
            VS2019 Update 6 services.
            </content>
            <content>
            VS2019 Update 7 services.
            </content>
            <content>
            VS2019 Update 8 services.
            </content>
            <content>
            VS2019 Update 9 services.
            </content>
            <content>
            VS2022 services.
            </content>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_10">
            <summary>
            Gets the services available in Visual Studio 2019 Update 10.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VisualStudioServices.VS2019_10Services">
            <summary>
            Enumerates the services available in Visual Studio 2019 Update 10.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VisualStudioServices.VS2019_10Services.Instance">
            <summary>
            The singleton instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.VisualStudioServices.VS2019_10Services.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.VisualStudioServices.VS2019_10Services" /> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_10Services.FileSystem">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the file system service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_10Services.TraceHubRegistrationService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor" /> for the TraceHubRegistration service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.Logging.ITraceHubRegistrationService" /> interface for the proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_11">
            <summary>
            Gets the services available in Visual Studio 2019 Update 11.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VisualStudioServices.VS2019_11Services">
            <summary>
            Enumerates the services available in Visual Studio 2019 Update 11.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VisualStudioServices.VS2019_11Services.Instance">
            <summary>
            The singleton instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.VisualStudioServices.VS2019_11Services.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.VisualStudioServices.VS2019_11Services" /> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_4">
            <summary>
            Gets the services available in Visual Studio 2019 Update 4.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VisualStudioServices.VS2019_4Services">
            <summary>
            Enumerates the services available in Visual Studio 2019 Update 4.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VisualStudioServices.VS2019_4Services.Instance">
            <summary>
            The singleton instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.VisualStudioServices.VS2019_4Services.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.VisualStudioServices.VS2019_4Services" /> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_4Services.SettingsManager">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the settings manager service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.Settings.ISettingsManager3" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_4Services.OutputChannelStore">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the output channel store service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.OutputChannel.IOutputChannelStore" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_4Services.OpenDocumentService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the open document service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.OpenDocument.IOpenDocumentService" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_4Services.BuildService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the open document service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.IBuildService" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_4Services.RemoteBrokeredServiceManifest">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the manifest service which discloses information about services available at a remote source.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.IBrokeredServiceManifest" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_5">
            <summary>
            Gets the services available in Visual Studio 2019 Update 5.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VisualStudioServices.VS2019_5Services">
            <summary>
            Enumerates the services available in Visual Studio 2019 Update 5.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VisualStudioServices.VS2019_5Services.Instance">
            <summary>
            The singleton instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.VisualStudioServices.VS2019_5Services.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.VisualStudioServices.VS2019_5Services" /> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_5Services.SingleFileGenerator">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the single file generator.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.SingleFileGenerators.ISingleFileGenerator" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_5Services.SolutionService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the solution service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_6">
            <summary>
            Gets the services available in Visual Studio 2019 Update 6.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VisualStudioServices.VS2019_6Services">
            <summary>
            Enumerates the services available in Visual Studio 2019 Update 6.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VisualStudioServices.VS2019_6Services.Instance">
            <summary>
            The singleton instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.VisualStudioServices.VS2019_6Services.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.VisualStudioServices.VS2019_6Services" /> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_6Services.ConnectedWorkspaceService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the connected workspace service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.ConnectedWorkspace.IConnectedWorkspaceService" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_6Services.FileSystem">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the file system service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_6Services.ExtensionMetadataService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the extension metadata service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.Extensibility.IExtensionMetadataService" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_6Services.VersionInfoService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the version info service.
            This service is available on a Live Share guest or Codespace client
            and provides version information regarding the Live Share host or Codespace server.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.VersionInfoService.IVersionInfoService" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_6Services.ProjectFileInvisibleEditorTracker">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the profile file invisible editor service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.ProjectFileEditing.IProjectFileInvisibleEditorTracker" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.VisualStudioServices.VS2019_6Services.CreateFileSystemProviderServiceDescriptor(Microsoft.ServiceHub.Framework.ServiceMoniker)">
            <summary>
            Creates a <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for an extension to the <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_6Services.FileSystem" />
            service.  An extension to the <see cref="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_6Services.FileSystem" /> service must implement
            <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemProvider" /> and can optionally implement <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IRemoteFileSystemProvider" />.
            </summary>
            <param name="moniker">The service moniker.</param>
            <returns>The service descriptor.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_7">
            <summary>
            Gets the services available in Visual Studio 2019 Update 7.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VisualStudioServices.VS2019_7Services">
            <summary>
            Enumerates the services available in Visual Studio 2019 Update 7.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VisualStudioServices.VS2019_7Services.Instance">
            <summary>
            The singleton instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.VisualStudioServices.VS2019_7Services.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.VisualStudioServices.VS2019_7Services" /> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_7Services.DiagnosticManagerService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the diagnostic manager service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticManagerService" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_7Services.DiagnosticViewerService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the diagnostic viewer service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticViewerService" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_7Services.BuildService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the open document service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.Build.IBuildService" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_7Services.SolutionService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the solution service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_7Services.FileSystem">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the file system service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_7Services.ContextRuleMonitorService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the context rule monitoring service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.ContextRuleMonitor.IContextRuleMonitorService" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_7Services.FileSystemAuthorizationService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the context rule monitoring service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystemAuthorizationService" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_8">
            <summary>
            Gets the services available in Visual Studio 2019 Update 8.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VisualStudioServices.VS2019_8Services">
            <summary>
            Enumerates the services available in Visual Studio 2019 Update 8.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VisualStudioServices.VS2019_8Services.Instance">
            <summary>
            The singleton instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.VisualStudioServices.VS2019_8Services.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.VisualStudioServices.VS2019_8Services" /> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_8Services.OpenDocumentService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the open document service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.OpenDocument.IOpenDocumentService" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_8Services.FileSystem">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the file system service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_8Services.OutputChannelStore">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the output channel store service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.OutputChannel.IOutputChannelStore" /> interface for the client proxy for this service.
            </summary>
            Note: A new descriptor will be created everytime this is used. This is to avoid loading Nerdbank.Streams early in VS startup.
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_8Services.ReducedFunctionalityReportingService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the service to report missing brokered services to.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.IReducedFunctionalityReportingService" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_9">
            <summary>
            Gets the services available in Visual Studio 2019 Update 9.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VisualStudioServices.VS2019_9Services">
            <summary>
            Enumerates the services available in Visual Studio 2019 Update 9.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VisualStudioServices.VS2019_9Services.Instance">
            <summary>
            The singleton instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.VisualStudioServices.VS2019_9Services.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.VisualStudioServices.VS2019_9Services" /> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_9Services.DiagnosticManagerBroadcastService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the diagnostic manager broadcast service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.DiagnosticManagement.IDiagnosticManagerService" /> interface for the client proxy for this service.
            This service is used when the diagnostics being set via the service are not meant to be applied to the local instance of VS, but instead only to remote instances after broadcasting.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_9Services.CacheService">
             <summary>
             Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the cache feature that can be used
             to cache solution/folder and commit specific data such as unit test, language service related structures
             both locally and remotely to help speed up initialiation of those features.
            
             Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.Caching.ICacheService" /> interface for the client proxy for this service.
             </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_9Services.ClientNotificationService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the client notification service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.IClientNotificationService" /> interface for the proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_9Services.FileSystem">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the file system service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.FileSystem.IFileSystem" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_9Services.ExtensionResourceDictionaryService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the extension resource dictionary service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.IStringResourceDictionary" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2019_9Services.SolutionService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the solution service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.Solution.ISolutionService" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.VisualStudioServices.VS2019_9Services.ApplyRecommendations(Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor)">
            <summary>
            Applies the recommended settings to a given <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor" /> and returns the modified version.
            </summary>
            <param name="descriptor">The descriptor to modify.</param>
            <returns>The modified descriptor.</returns>
            <remarks>
            Derived classes may use the C# <see langword="new" /> modifier to re-declare this method to update what it does
            such that it only applies to new or overridden descriptor properties within that class.
            Always redefine <see cref="M:Microsoft.VisualStudio.VisualStudioServices.VS2019_9Services.CreateDescriptor(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,System.Type)" /> when redefining this member
            so that it calls the new <see cref="M:Microsoft.VisualStudio.VisualStudioServices.VS2019_9Services.ApplyRecommendations(Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor)" /> method.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.VisualStudioServices.VS2019_9Services.CreateDescriptor(Microsoft.ServiceHub.Framework.ServiceMoniker,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,System.Type)">
            <summary>
            Creates a descriptor that is configured with the recommendations for the version of Visual Studio identified by the declaring class.
            </summary>
            <param name="serviceMoniker"><inheritdoc cref="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Type,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters)" path="/param[@name='serviceMoniker']" /></param>
            <param name="formatter"><inheritdoc cref="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Type,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters)" path="/param[@name='formatter']" /></param>
            <param name="clientInterface"><inheritdoc cref="M:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.#ctor(Microsoft.ServiceHub.Framework.ServiceMoniker,System.Type,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.Formatters,Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor.MessageDelimiters)" path="/param[@name='clientInterface']" /></param>
            <returns>The <see cref="T:Microsoft.ServiceHub.Framework.ServiceJsonRpcDescriptor" /> with the recommendations for this VS version applied.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2022">
            <summary>
            Gets the services available in Visual Studio 2022.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.VisualStudioServices.VS2022Services">
            <summary>
            Enumerates the services available in Visual Studio 2022.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.VisualStudioServices.VS2022Services.Instance">
            <summary>
            The singleton instance of this class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.VisualStudioServices.VS2022Services.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.VisualStudioServices.VS2022Services" /> class.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2022Services.ExtensionMetadataService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the extension metadata service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.Extensibility.IExtensionMetadataService" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.VisualStudioServices.VS2022Services.MissingComponentRegistrationService">
            <summary>
            Gets the <see cref="T:Microsoft.ServiceHub.Framework.ServiceRpcDescriptor" /> for the missing component registration service.
            Use the <see cref="T:Microsoft.VisualStudio.RpcContracts.Setup.IMissingComponentRegistrationService" /> interface for the client proxy for this service.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Used by C# 9 for property <c>init</c> accessors.
            </summary>
        </member>
    </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>n2eGBMN6CR4a6C90evzfXSCo7XB3hbdKjY7FE4kqfFU=</DigestValue></Reference></SignedInfo><SignatureValue>sLr6qnnsSBfTwjdlBvm0JZ6q9NROcH/zBMe3WUdqkB5sK3OdefBi/8OF0vmThkadNgDX7Bod39vHkjiwsUwcoWORAwLotZd4s0XYTIQ/dThyK5ZLRJxSonC+YTpEhpfn0ANDCHAO6xg7Ebi5DYxpPebVQmyFSMBuWQgtrtfpxhqgoMbCXi5xinBBCAf8IAXcKX4VChFdakzhTcacHCfAtjSkGt0RdatbxcanaxE1z+frGOnQlTbhQo9Xf9lXXF1smp2yn166cZFYg9MoKSnr85I/SyJ9Mb/sAZ2TwHZZBCZp0SzE59SZ/S22xEu1EXAo9Vqex2EbZ+1pcq665Cg5Iw==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>0OTPj7P1+wTbr+Qf9COrqA8I9DSTqNSq1UKju4IEV3HJJck61i+MTEoYyKLtiLG2Jxeu8F81QKuTpuKHvi380gzs43G+prNNIAaNDkGqsENQYo8iezbw3/NCNX1vTi++irdFqXNs6xoc3B3W+7qT678b0jTVL8St7IMO2E7d9eNdL6RKfMnwRJf4XfGcwL+OwwoCeY9c5tvebNUVWRzaejKIkBVThApuAMCtpdvIvmBEdSTuCKZUx+OLr81/aEZyR2jL1s2RKaMz8uIzTtgw6m3DbOM4ewFjIRNT1hVQPghyPxJ+ZwErwry5rkf7fKuG3PF0fECGSUEqftlOptpXTQ==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>MIIF/zCCA+egAwIBAgITMwAAAlKLM6r4lfM52wAAAAACUjANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExMB4XDTIxMDkwMjE4MzI1OVoXDTIyMDkwMTE4MzI1OVowdDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEeMBwGA1UEAxMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0OTPj7P1+wTbr+Qf9COrqA8I9DSTqNSq1UKju4IEV3HJJck61i+MTEoYyKLtiLG2Jxeu8F81QKuTpuKHvi380gzs43G+prNNIAaNDkGqsENQYo8iezbw3/NCNX1vTi++irdFqXNs6xoc3B3W+7qT678b0jTVL8St7IMO2E7d9eNdL6RKfMnwRJf4XfGcwL+OwwoCeY9c5tvebNUVWRzaejKIkBVThApuAMCtpdvIvmBEdSTuCKZUx+OLr81/aEZyR2jL1s2RKaMz8uIzTtgw6m3DbOM4ewFjIRNT1hVQPghyPxJ+ZwErwry5rkf7fKuG3PF0fECGSUEqftlOptpXTQIDAQABo4IBfjCCAXowHwYDVR0lBBgwFgYKKwYBBAGCN0wIAQYIKwYBBQUHAwMwHQYDVR0OBBYEFDWSWhFBi9hrsLe2TgLuHnxGF3nRMFAGA1UdEQRJMEekRTBDMSkwJwYDVQQLEyBNaWNyb3NvZnQgT3BlcmF0aW9ucyBQdWVydG8gUmljbzEWMBQGA1UEBRMNMjMwMDEyKzQ2NzU5NzAfBgNVHSMEGDAWgBRIbmTlUAXTgqoXNzcitW2oynUClTBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NybC9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3JsMGEGCCsGAQUFBwEBBFUwUzBRBggrBgEFBQcwAoZFaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0cy9NaWNDb2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggIBABZJN7ksZExAYdTbQJewYryBLAFnYF9amfhHWTGG0CmrGOiIUi10TMRdQdzinUfSv5HHKZLzXBpfA+2MmEuJoQlDAUflS64N3/D1I9/APVeWomNvyaJO1mRTgJoz0TTRp8noO5dJU4k4RahPtmjrOvoXnoKgHXpRoDSSkRy1kboRiriyMOZZIMfSsvkL2a5/w3YvLkyIFiqfjBhvMWOjwb744LfY0EoZZz62d1GPAb8Muq8p4VwWldFdE0y9IBMe3ofytaPDImq7urP+xcqji3lEuL0x4fU4AS+Q7cQmLq120gVbS9RY+OPjnf+nJgvZpr67Yshu9PWN0Xd2HSY9n9xiau2OynVqtEGIWrSoQXoOH8Y4YNMrrdoOmjNZsYzT6xOPM+h1gjRrvYDCuWbnZXUcOGuOWdOgKJLaH9AqjskxK76tGI6BOF6WtPvO0/z1VFzan+2PqklO/vS7S0LjGEeMN3Ej47jbrLy3/YAZ3IeUajO5Gg7WFg4C8geNhH7MXjKsClsAPk1YtB61kan0sdqJWxOeoSXBJDIzkis97EbrqRQl91K6MmH+di/tolU63WvF1nrDxutjJ590/ALi383iRbgG3zkhEceyBWTvdlD6FxNbhIy+bJJdck2QdzLm4DgOBfCqETYb4hQBEk/pxvHPLiLG2Xm9PEnmEDKo1RJp</X509Certificate><X509Certificate>MIIHejCCBWKgAwIBAgIKYQ6Q0gAAAAAAAzANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEwNzA4MjA1OTA5WhcNMjYwNzA4MjEwOTA5WjB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAq/D6chAcLq3YbqqCEE00uvK2WCGfQhsqa+laUKq4BjgaBEm6f8MMHt03a8YS2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc6Whe0t+bU7IKLMOv2akrrnoJr9eWWcpgGgXpZnboMlImEi/nqwhQz7NEt13YxC4Ddato88tt8zpcoRb0RrrgOGSsbmQ1eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+lD3v++MrWhAfTVYoonpy4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3oiU+EGvKhL1nkkDstrjNYxbc+/jLTswM9sbKvkjh+0p2ALPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6A4aN91/w0FK/jJSHvMAhdCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxhH2rhKEmdX4jiJV3TIUs+UsS1Vz8kA/DRelsv1SPjcF0PUUZ3s/gA4bysAoJf28AVs70b1FVL5zmhD+kjSbwYuER8ReTBw3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fufr/zdsGbiwZeBe+3W7UvnSSmnEyimp31ngOaKYnhfsi+E11ecXL93KCjx7W3DKI8sj0A3T8HhhUSJxAlMxdSlQy90lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS4NaIjAsCAwEAAaOCAe0wggHpMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBRIbmTlUAXTgqoXNzcitW2oynUClTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBRyLToCMZBDuRQFTuHqp8cx0SOJNDBaBgNVHR8EUzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3JsMF4GCCsGAQUFBwEBBFIwUDBOBggrBgEFBQcwAoZCaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDExXzIwMTFfMDNfMjIuY3J0MIGfBgNVHSAEgZcwgZQwgZEGCSsGAQQBgjcuAzCBgzA/BggrBgEFBQcCARYzaHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3ByaW1hcnljcHMuaHRtMEAGCCsGAQUFBwICMDQeMiAdAEwAZQBnAGEAbABfAHAAbwBsAGkAYwB5AF8AcwB0AGEAdABlAG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn8oalmOBUeRou09h0ZyKbC5YR4WOSmUKWfdJ5DJDBZV8uLD74w3LRbYP+vj/oCso7v0epo/Np22O/IjWll11lhJB9i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0bpdS1HXeUOeLpZMlEPXh6I/MTfaaQdION9MsmAkYqwooQu6SpBQyb7Wj6aC6VoCo/KmtYSWMfCWluWpiW5IP0wI/zRive/DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvyCInWH8MyGOLwxS3OW560STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/sfQn+N4sOiBpmLJZiWhub6e3dMNABQamASooPoI/E01mC8CzTfXhj38cbxV9Rad25UAqZaPDXVJihsMdYzaXht/a8/jyFqGaJ+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5hYbXw3MYbBL7fQccOKO7eZS/sl/ahXJbYANahRr1Z85elCUtIEJmAH9AAKcWxm6U/RXceNcbSoqKfenoi+kiVH6v7RyOA9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8i+sLgOppO6/8MO0ETI7f33VtY5E90Z1WTk+/gFcioXgRMiF670EKsT/7qMykXcGhiJtXcVZOSEXAQsmbdlsKgEhr/Xmfwb1tbWrJUnMTDXpQzQ==</X509Certificate><X509Certificate>MIIF7TCCA9WgAwIBAgIQP4vItfyfspZDtWnWbELhRDANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEwMzIyMjIwNTI4WhcNMzYwMzIyMjIxMzA0WjCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCygEGqNThNE3IyaCJNuLLx/9VSvGzH9dJKjDbu0cJcfoyKrq8TKG/Ac+M6ztAlqFo6be+ouFmrEyNozQwph9FvgFyPRH9dkAFSWKxRxV8qh9zc2AodwQO5e7BW6KPeZGHCnvjzfLnsDbVU/ky2ZU+I8JxImQxCCwl8MVkXeQZ4KI2JOkwDJb5xalwL54RgpJki49KvhKSn+9GY7Qyp3pSJ4Q6g3MDOmT3qCFK7VnnkH4S6Hri0xElcTzFLh93dBWcmmYDgcRGjuKVB4qRTufcyKYMME782XgSzS0NHL2vikR7TmE/dQgfI6B0S/Jmpaz6SfsjWaTr8ZL22CZ3K/QwLopt3YEsDlKQwaRLWQi3BQUzK3Kr9j1uDRprZ/LHR47PJf0h6zSTwQY9cdNCssBAgBkm3xy0hyFfj0IbzA2j70M5xwYmZSmQBbP3sMJHPQTySx+W6hh1hhMdfgzlirrSSL0fzC/hV66AfWdC7dJse0Hbm8ukG1xDo+mTeacY1logC8Ea4PyeZb8txiSk190gWAjWP1Xl8TQLPX+uKg09FcYj5qQ1OcunCnAfPSRtOBA5jUYxe2ADBVSy2xuDCZU7JNDn1nLPEfuhhbhNfFcRf2X7tHc7uROzLLoax7Dj2cO2rXBPB2Q8Nx4CyVe0096yb5MPa50c8prWPMd/FS6/r8QIDAQABo1EwTzALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUci06AjGQQ7kUBU7h6qfHMdEjiTQwEAYJKwYBBAGCNxUBBAMCAQAwDQYJKoZIhvcNAQELBQADggIBAH9yzw+3xRXbm8BJyiZb/p4T5tPw0tuXX/JLP02zrhmu7deXoKzvqTqjwkGw5biRnhOBJAPmCf0/V0A5ISRW0RAvS0CpNoZLtFNXmvvxfomPEf4YbFGq6O0JlbXlccmh6Yd1phV/yX43VF50k8XDZ8wNT2uoFwxtCJJ+i92Bqi1wIcM9BhS7vyRep4TXPw8hIr1LAAbblxzYXtTFC1yHblCk6MM4pPvLLMWSZpuFXst6bJN8gClYW1e1QGm6CHmmZGIVnYeWRbVmIyADixxzoNOieTPgUFmG2y/lAiXqcyqfABTINseSO+lOAOzYVgm5M0kS0lQLAausR7aRKX1MtHWAUgHoyoL2n8ysnI8X6i8msKtyrAv+nlEex0NVZ09Rs1fWtuzuUrc66U7h14GIvE+OdbtLqPA1qibUZ2dJsnBMO5PcHd94kIZysjik0dySTclY6ysSXNQ7roxrsIPlAT/4CTL2kzU0Iq/dNw13CYArzUgA8YyZGUcFAenRv9FO0OYoQzeZpApKCNmacXPSqs0xE2N2oTdvkjgefRI8ZjLny23h/FKJ3crWZgWalmG+oijHHKOnNlA8OqTfSm7mhzvO6/DggTedEzxSjr25HTTGHdUKaj2YKXCMiSrRq4IQSB/c9O+lxbtVGjhjhE63bK2VVOxlIhBJF7jAHscPrFRH</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>MIIE8TCCA9mgAwIBAgITMwAAAVIwS12JrOZwRwAAAAABUjANBgkqhkiG9w0BAQsFADB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDAeFw0yMDExMTIxODI2MDVaFw0yMjAyMTExODI2MDVaMIHKMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSUwIwYDVQQLExxNaWNyb3NvZnQgQW1lcmljYSBPcGVyYXRpb25zMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVTTjozRTdBLUUzNTktQTI1RDElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAK7MboSJmHS1oJJuzAyK6kxNidtugXOOPUO4Ntu9PRFcoEJWX+6YD5TLbXgOYeIWGR65F2UsHTJrlL26bloqvuUEGpnO+0qAY2AJFsNMb1i7qTMPM9PNBG6VUi+hZXLSAhOcTKgnU7ebkg+mwsE1AJ1eyH7dNkXvckBy5vbVufGb/izF7jNN1t220Gupfz8kkXZUScA/4wG8XZRBKjpdQBpMoL8c8M8Jx78iw2gDHEsMjXAeEiWqNEGe3gczkdwoetmu8f68eeKGKR2UTOHd+NAWjCTV8bs9WGY7rQ7m9V2oD4f3fXiEcQ1AjRxuj5KRKLxJIlIs2LGCPR5Z49OHulsCAwEAAaOCARswggEXMB0GA1UdDgQWBBSE3a7arCPWXZzaH+RQsO4FEmx7FDAfBgNVHSMEGDAWgBTVYzpcijGQ80N7fEYbxTNoWoVtVTBWBgNVHR8ETzBNMEugSaBHhkVodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNUaW1TdGFQQ0FfMjAxMC0wNy0wMS5jcmwwWgYIKwYBBQUHAQEETjBMMEoGCCsGAQUFBzAChj5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY1RpbVN0YVBDQV8yMDEwLTA3LTAxLmNydDAMBgNVHRMBAf8EAjAAMBMGA1UdJQQMMAoGCCsGAQUFBwMIMA0GCSqGSIb3DQEBCwUAA4IBAQBVxSdx8WpJrNBsMRd/d3XT+6mJZBTkd1NvAb2/1t5UgNobigQvIhw0Tp7oJs4EyU9T6yalhhycreO5w2oKHCq4ubF2LaI/LiJDq+MB0Gn35UVaWsGpSw1dnOMKmAwJmPpu7xerQ2d2XhbIFsjQmS7ry9Q0bjCwx0o/d3P7UzOT1JSZrePsfI0Dnn12j2eEqahkyfl21/TdC/GVoTAwBo+T3G5S/0E3xw28WelaTiYsRFBbq0DetcrSygQhIpNgbs6x7ugxdkNg9bF/2gWFgrNnD9LCeF0GiPZLl7JgTcC4X9lfNHeF2nf9cbNl450RF8XLWsLtkHCEMhqN4UyLncaf</X509Certificate><X509Certificate>MIIGcTCCBFmgAwIBAgIKYQmBKgAAAAAAAjANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTAwHhcNMTAwNzAxMjEzNjU1WhcNMjUwNzAxMjE0NjU1WjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKkdDbx3EYo6IOz8E5f1+n9plGt0VBDVpQoAgoX77XxoSyxfxcPlYcJ2tz5mK1vwFVMnBDEfQRsalR3OCROOfGEwWbEwRA/xYIiEVEMM1024OAizQt2TrNZzMFcmgqNFDdDq9UeBzb8kYDJYYEbyWEeGMoQedGFnkV+BVLHPk0ySwcSmXdFhE24oxhr5hoC732H8RsEnHSRnEnIaIYqvS2SJUGKxXf13Hz3wV3WsvYpCTUBR0Q+cBj5nf/VmwAOWRH7v0Ev9buWayrGo8noqCjHw2k4GkbaICDXoeByw6ZnNPOcvRLqn9NxkvaQBwSAJk3jN/LzAyURdXhacAQVPIk0CAwEAAaOCAeYwggHiMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBTVYzpcijGQ80N7fEYbxTNoWoVtVTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBTV9lbLj+iiXGJo0T2UkFvXzpoYxDBWBgNVHR8ETzBNMEugSaBHhkVodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5jcmwwWgYIKwYBBQUHAQEETjBMMEoGCCsGAQUFBzAChj5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNydDCBoAYDVR0gAQH/BIGVMIGSMIGPBgkrBgEEAYI3LgMwgYEwPQYIKwYBBQUHAgEWMWh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9QS0kvZG9jcy9DUFMvZGVmYXVsdC5odG0wQAYIKwYBBQUHAgIwNB4yIB0ATABlAGcAYQBsAF8AUABvAGwAaQBjAHkAXwBTAHQAYQB0AGUAbQBlAG4AdAAuIB0wDQYJKoZIhvcNAQELBQADggIBAAfmiFEN4sbgmD+BcQM9naOhIW+z66bM9TG+zwXiqf76V20ZMLPCxWbJat/15/B4vceoniXj+bzta1RXCCtRgkQS+7lTjMz0YBKKdsxAQEGb3FwX/1z5Xhc1mCRWS3TvQhDIr79/xn/yN31aPxzymXlKkVIArzgPF/UveYFl2am1a+THzvbKegBvSzBEJCI8z+0DpZaPWSm8tv0E4XCfMkon/VWvL/625Y4zu2JfmttXQOnxzplmkIz/amJ/3cVKC5Em4jnsGUpxY517IW3DnKOiPPp/fZZqkHimbdLhnPkd/DjYlPTGpQqWhqS9nhquBEKDuLWAmyI4ILUl5WTs9/S/fmNZJQ96LjlXdqJxqgaKD4kWumGnEcua2A5HmoDF0M2n0O99g/DhO3EJ3110mCIIYdqwUB5vvfHhAN/nMQekkzr3ZUd46PioSKv33nJ+YWtvd6mBy6cJrDm77MbL2IK0cs0d9LiFAR6A+xuJKlQ5slvayA1VmXqHczsI5pgt6o3gMy4SKfXAL1QnIffIrE7aKLixqduWsqdCosnPGUFN4Ib5KpqjEWYw07t0MkvfY3v1mYovG8chr1m1rtxEPJdQcdeh0sVV42neV8HR3jDA/czmTfsNv11P6Z0eGTgvvM9YBS7vDaBQNdrvCScc1bN+NR4Iuto229Nfj950iEkS</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">MIAGCSqGSIb3DQEHAqCAMIISugIBAzEPMA0GCWCGSAFlAwQCAQUAMIIBUQYLKoZIhvcNAQkQAQSgggFABIIBPDCCATgCAQEGCisGAQQBhFkKAwEwMTANBglghkgBZQMEAgEFAAQg3C1zIKuk6puMwTFSmXMGyLurVI0VSG10u8Zc6QM/IjUCBmHA3Q6hRBgTMjAyMjAxMDUyMTEwNTAuMjYxWjAEgAIB9KCB0KSBzTCByjELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjElMCMGA1UECxMcTWljcm9zb2Z0IEFtZXJpY2EgT3BlcmF0aW9uczEmMCQGA1UECxMdVGhhbGVzIFRTUyBFU046M0U3QS1FMzU5LUEyNUQxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2Wggg48MIIE8TCCA9mgAwIBAgITMwAAAVIwS12JrOZwRwAAAAABUjANBgkqhkiG9w0BAQsFADB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDAeFw0yMDExMTIxODI2MDVaFw0yMjAyMTExODI2MDVaMIHKMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSUwIwYDVQQLExxNaWNyb3NvZnQgQW1lcmljYSBPcGVyYXRpb25zMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVTTjozRTdBLUUzNTktQTI1RDElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAK7MboSJmHS1oJJuzAyK6kxNidtugXOOPUO4Ntu9PRFcoEJWX+6YD5TLbXgOYeIWGR65F2UsHTJrlL26bloqvuUEGpnO+0qAY2AJFsNMb1i7qTMPM9PNBG6VUi+hZXLSAhOcTKgnU7ebkg+mwsE1AJ1eyH7dNkXvckBy5vbVufGb/izF7jNN1t220Gupfz8kkXZUScA/4wG8XZRBKjpdQBpMoL8c8M8Jx78iw2gDHEsMjXAeEiWqNEGe3gczkdwoetmu8f68eeKGKR2UTOHd+NAWjCTV8bs9WGY7rQ7m9V2oD4f3fXiEcQ1AjRxuj5KRKLxJIlIs2LGCPR5Z49OHulsCAwEAAaOCARswggEXMB0GA1UdDgQWBBSE3a7arCPWXZzaH+RQsO4FEmx7FDAfBgNVHSMEGDAWgBTVYzpcijGQ80N7fEYbxTNoWoVtVTBWBgNVHR8ETzBNMEugSaBHhkVodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNUaW1TdGFQQ0FfMjAxMC0wNy0wMS5jcmwwWgYIKwYBBQUHAQEETjBMMEoGCCsGAQUFBzAChj5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY1RpbVN0YVBDQV8yMDEwLTA3LTAxLmNydDAMBgNVHRMBAf8EAjAAMBMGA1UdJQQMMAoGCCsGAQUFBwMIMA0GCSqGSIb3DQEBCwUAA4IBAQBVxSdx8WpJrNBsMRd/d3XT+6mJZBTkd1NvAb2/1t5UgNobigQvIhw0Tp7oJs4EyU9T6yalhhycreO5w2oKHCq4ubF2LaI/LiJDq+MB0Gn35UVaWsGpSw1dnOMKmAwJmPpu7xerQ2d2XhbIFsjQmS7ry9Q0bjCwx0o/d3P7UzOT1JSZrePsfI0Dnn12j2eEqahkyfl21/TdC/GVoTAwBo+T3G5S/0E3xw28WelaTiYsRFBbq0DetcrSygQhIpNgbs6x7ugxdkNg9bF/2gWFgrNnD9LCeF0GiPZLl7JgTcC4X9lfNHeF2nf9cbNl450RF8XLWsLtkHCEMhqN4UyLncafMIIGcTCCBFmgAwIBAgIKYQmBKgAAAAAAAjANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTAwHhcNMTAwNzAxMjEzNjU1WhcNMjUwNzAxMjE0NjU1WjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKkdDbx3EYo6IOz8E5f1+n9plGt0VBDVpQoAgoX77XxoSyxfxcPlYcJ2tz5mK1vwFVMnBDEfQRsalR3OCROOfGEwWbEwRA/xYIiEVEMM1024OAizQt2TrNZzMFcmgqNFDdDq9UeBzb8kYDJYYEbyWEeGMoQedGFnkV+BVLHPk0ySwcSmXdFhE24oxhr5hoC732H8RsEnHSRnEnIaIYqvS2SJUGKxXf13Hz3wV3WsvYpCTUBR0Q+cBj5nf/VmwAOWRH7v0Ev9buWayrGo8noqCjHw2k4GkbaICDXoeByw6ZnNPOcvRLqn9NxkvaQBwSAJk3jN/LzAyURdXhacAQVPIk0CAwEAAaOCAeYwggHiMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBTVYzpcijGQ80N7fEYbxTNoWoVtVTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBTV9lbLj+iiXGJo0T2UkFvXzpoYxDBWBgNVHR8ETzBNMEugSaBHhkVodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5jcmwwWgYIKwYBBQUHAQEETjBMMEoGCCsGAQUFBzAChj5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNydDCBoAYDVR0gAQH/BIGVMIGSMIGPBgkrBgEEAYI3LgMwgYEwPQYIKwYBBQUHAgEWMWh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9QS0kvZG9jcy9DUFMvZGVmYXVsdC5odG0wQAYIKwYBBQUHAgIwNB4yIB0ATABlAGcAYQBsAF8AUABvAGwAaQBjAHkAXwBTAHQAYQB0AGUAbQBlAG4AdAAuIB0wDQYJKoZIhvcNAQELBQADggIBAAfmiFEN4sbgmD+BcQM9naOhIW+z66bM9TG+zwXiqf76V20ZMLPCxWbJat/15/B4vceoniXj+bzta1RXCCtRgkQS+7lTjMz0YBKKdsxAQEGb3FwX/1z5Xhc1mCRWS3TvQhDIr79/xn/yN31aPxzymXlKkVIArzgPF/UveYFl2am1a+THzvbKegBvSzBEJCI8z+0DpZaPWSm8tv0E4XCfMkon/VWvL/625Y4zu2JfmttXQOnxzplmkIz/amJ/3cVKC5Em4jnsGUpxY517IW3DnKOiPPp/fZZqkHimbdLhnPkd/DjYlPTGpQqWhqS9nhquBEKDuLWAmyI4ILUl5WTs9/S/fmNZJQ96LjlXdqJxqgaKD4kWumGnEcua2A5HmoDF0M2n0O99g/DhO3EJ3110mCIIYdqwUB5vvfHhAN/nMQekkzr3ZUd46PioSKv33nJ+YWtvd6mBy6cJrDm77MbL2IK0cs0d9LiFAR6A+xuJKlQ5slvayA1VmXqHczsI5pgt6o3gMy4SKfXAL1QnIffIrE7aKLixqduWsqdCosnPGUFN4Ib5KpqjEWYw07t0MkvfY3v1mYovG8chr1m1rtxEPJdQcdeh0sVV42neV8HR3jDA/czmTfsNv11P6Z0eGTgvvM9YBS7vDaBQNdrvCScc1bN+NR4Iuto229Nfj950iEkSoYICzjCCAjcCAQEwgfihgdCkgc0wgcoxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJTAjBgNVBAsTHE1pY3Jvc29mdCBBbWVyaWNhIE9wZXJhdGlvbnMxJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOjNFN0EtRTM1OS1BMjVEMSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNloiMKAQEwBwYFKw4DAhoDFQC/bp5Ulq6ZyZNyF3qGprJAw0NeW6CBgzCBgKR+MHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMA0GCSqGSIb3DQEBBQUAAgUA5YBzRDAiGA8yMDIyMDEwNjAzNDMwMFoYDzIwMjIwMTA3MDM0MzAwWjB3MD0GCisGAQQBhFkKBAExLzAtMAoCBQDlgHNEAgEAMAoCAQACAgEzAgH/MAcCAQACAhIHMAoCBQDlgcTEAgEAMDYGCisGAQQBhFkKBAIxKDAmMAwGCisGAQQBhFkKAwKgCjAIAgEAAgMHoSChCjAIAgEAAgMBhqAwDQYJKoZIhvcNAQEFBQADgYEASmAj2LA0T3yY9gSkZlExcKSmQGYHT1rwCj3u2frnRAls+19pvPwVvh3p8oCiNCYPkCdQ1sxw0zNed70eAHVVAOKtMpnOQ4JMqrswTcOi1shOUscMCmLJiNu1tmhp8uaJyJTiv3Qthwe0DOJWv9M6JmiPFzfy9nVsW8vtgjXxCvUxggMNMIIDCQIBATCBkzB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMAITMwAAAVIwS12JrOZwRwAAAAABUjANBglghkgBZQMEAgEFAKCCAUowGgYJKoZIhvcNAQkDMQ0GCyqGSIb3DQEJEAEEMC8GCSqGSIb3DQEJBDEiBCBf4dVd+3bR1hrtiYZByirV+WRmLsbETnYYvaSl2KKcMTCB+gYLKoZIhvcNAQkQAi8xgeowgecwgeQwgb0EIJPuXMejiyVQjF8QanwtdA2KT95wrq+64ZYhyYGuuyemMIGYMIGApH4wfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTACEzMAAAFSMEtdiazmcEcAAAAAAVIwIgQgImBLlOujJ403z4kKPBYQjVhEtG2rpS1KVZre4JQtlfkwDQYJKoZIhvcNAQELBQAEggEAaP5UEhfUjq2GCwVU3acYZLni91QZF6tKIZvDvjTz+L8rMwnJXRWMIFSRXdOX/HX+3CpxjGyJCP2Et4hOEOm7ARsixje+p+NIs3jysW48Khp3kuHk9cDYk3DlwIOJxzTHCJvQJdcl6UWgESyB+kjIgmG8u7IxmjJDb+YAriNhwSelvyhmuS/c1PVMr+dGcnPSSwnsfvBmEemuY92f90sse5CPduAxci0jLLH5hV7zdfcJAQ5vnUTqpSOjWZfVIjqE8QWuxqG6mQ0OLrnDeqNpaVMikRLsY1Q1JrGm+TutqyNsDtGCelx5lUfs3uePEYDd/VgHUNL9t0yFbBhp3QGp7wAAAAA=</CounterSignature></Object></Signature></doc>
